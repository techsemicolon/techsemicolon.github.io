<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/tags/5.8.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2019-04-24T11:25:14+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Laravel tips for a secure healthcare application]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/25/laravel-tips-for-a-secure-healthcare-application/"/>
            <updated>2019-03-25T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/25/laravel-tips-for-a-secure-healthcare-application/</id>
            <content type="html"><![CDATA[<p>Laravel being a very flexible framework, it can be a great choice for building large applications in domains which require higher levels of application security. Some of such domains are Healthcare, Banking, Government, Ecommerce. Any website no matter what is the domain, needs to be secure. However, with the beforementioned domains, liabilities are much more because you are dealing with very sensitive data.</p>

<p>Security breaches can occure from many ways, not just from application's development vulnerabilities but some of the architecture level server backdoors or may be poor levels of access control. We will be just discussing the steps you can take on Laravel framework level to make sure there are no such loopholes or backdoors open for exploitation.</p>

<h3 id="1.-authentication-and-acl-%3A">1. Authentication and ACL :</h3>

<p>Let's get the basic definition of authentication first, <code>Its the process of verifying the identity of a user</code>. Authentication process is a key entry point using which user in your application logs in. It can be stateful which maintains a user session on server and client level or stateless/token based authentication. All the secure domains MUST have extremely robust and full proof authentication set up.</p>

<p>Below are some of the pointers you SHOULD consider : 
- Get minimum information about the user but make sure its verified/authentic. Earlier email verification was a key. Now a days there are so many disposable email services available or simply creating a new fake gmail account is not much of a pain, its no more a safe way to verify. You can use more personalized way of verification which is from user's mobile number.
- Log the user's IP address and access geolocation. This will give you a couple of locations from which user frequently accesses the application login. If someone logs in from a different/new location, you can shoot an email or text message for an approval. This is extremely handy as if user denies that its not him/her, you can immediately block that user automatically until some futher unblock action is taken from the original user.
- If your website allows passwords like <code>test123</code> or <code>abcd1234</code> or <code>qwerty</code>, it is a high time you need to go back and update that without thinking twice. You SHOULD enforce password strength policies.
- Make sure you are not fooling around with the default password hashing in Laravel. If you do, make sure its a very strong authentication which is NOT reversible. The thumb rule is <code>Implement a cryptography which is a one way function which means that you can convert your password to a hash, but you can not easily convert your hash to a password</code>.
- Enable throttling and if you see the large consecutive failed attempts, log it and report it to the user. Lock the user until he verifies its him/her.
- If you are having username as the main login reference instead of email, do not override entire login functionality in Laravel. Laravel provides a handy way to do the same. 
- If you are using one time passwords(OTP) for any set of login authentication, make sure those are unique and enabled for limited duration with an expory time. Also, the route urls in which user enters the OTP can be a temporary signed url with an expiration time as well.
- There should be NO admin with all access. The main misconception is, if there is an owner/higher level person, he/she has to have a login to see all information. There has to be a limit on what the higher level people see.
- This can be a totally big topic of discussion, but I do not see a point of having 3rd party social logins in a secure website. You have to have total control over the authentication process. If I am logging through google, you know how easy it is to have a face gmail account.
- STOP integrating 3rd party plugin directly into authentication unless you study them entirely, view issues threads or may be contact the developers for more details infomation on how their plugin is maintaining basic security. The last think you would want is, having your application secured but a 3rd party plugin you installed has a backdoor for exploitation.
- 
- Even if your website has just few sets of user types, set role for each user.
-</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel finally has higher level orWhere for query scopes]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/"/>
            <updated>2019-03-17T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/</id>
            <content type="html"><![CDATA[<p>Laravel's excellent querybuilder and Eloquent ORM is handy as ever. But with newer version of laravel, it's much more simpler. 5.8 is here already and this feature has not been talked as much because it seems a minor feature release. Let's dive in with an example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Role;

class User extends Authenticatable
{
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [

        'password', 'remember_token',
    ];

    /*
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];

    /**
     * Scope a query to only filter admin users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeAdmin($query)
    {
        return $query-&gt;where('role', Role::Admin);
    }

    /**
     * Scope a query to only filter reviewer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeReviewer($query)
    {
        return $query-&gt;where('role', Role::Reviewer);
    }

    /**
     * Scope a query to only filter customer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeCustomer($query)
    {
        return $query-&gt;where('role', Role::Customer);
    }
}
</code></pre>

<p>The use case is, we want to get the users who are either has <code>admin</code> or <code>reviewer</code> role.</p>

<p>For earlier versions of laravel(version &lt; 5.8), we would do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere(function (Builder $query) {
    $query-&gt;reviewer();
})-&gt;get();
</code></pre>

<p>There is nothing difficult in above eloquent query but having a closure just to filter a scope for an orWhere clause seems too much sometimes. But that case is no more valid after 5.8 releases. Now we can do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere-&gt;reviewer()-&gt;get();
</code></pre>

<p>And that's it. It's a very small change but makes the code much more simpler to implement and read. Sometimes you might get lost in the closures when the query is large. Features like this makes it much more comfortable to implement.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel has one through]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/"/>
            <updated>2019-03-13T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/</id>
            <content type="html"><![CDATA[<p>Laravel 5.8 is now released and one thing from the release notes many people might be waiting for is the <code>hasOneThrough</code> relationship. Laravel ealier had <code>hasManyThrough</code>, but with the addition of <code>hasOneThrough</code> it's more flexible. Let's dive into an example :</p>

<p>Consider we have <code>User</code> Model, <code>Reviewer</code> Model and <code>Activity</code> Model with structure :</p>

<pre><code>users
    id - integer
    reviewer_id - integer

reviewers
    id - integer

activities
    id - integer
    user_id - integer
</code></pre>

<p>Each <code>reviewer</code> has one <code>user</code>, and each <code>user</code> is associated with one user <code>activity</code> record. If we want to get <code>activity</code> from <code>reviewer</code>, there is no <code>reviewer_id</code> column in <code>activities</code> table, in such case we can use <code>hasOneThrough</code> relation. Let's define the relationship now :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough('App\Activity', 'App\User');
    }
}
</code></pre>

<p>To understand more, lets use Laravel conventional terms on the models. In this case the <code>Activity</code> is the final model we would need to relate, while <code>User</code> is the intermediate model.</p>

<p>As all other relationships in Laravel, we can also explicitely specify the foreign keys while definining <code>hasOneThrough</code> relation, Let's do that for this example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough(
            'App\Activity',
            'App\User',
            'reviewer_id', // Foreign key on users table...
            'user_id', // Foreign key on activities table...
            'id', // Local key on reviewers table...
            'id' // Local key on users table...
        );
    }
}
</code></pre>

<p>Now you can easily do :</p>

<pre><code class="php">$reviewer = Reviewer::first();
$activity = $reviewer-&gt;activity;
</code></pre>
]]></content>
        </entry>
    </feed>