<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/tags/security.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2019-10-22T19:39:33+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Laravel APP_KEY rotation policy for app security]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/06/14/laravel-app-key-rotation-policy-for-security/"/>
            <updated>2019-06-14T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/06/14/laravel-app-key-rotation-policy-for-security/</id>
            <content type="html"><![CDATA[<p>If you have an existing laravel app running or you do fresh laravel installation, you will notice in your app's <code>.env</code> file (in case of new installations it's in <code>.env.example</code> file), there is a key called <code>APP_KEY</code>. It is a  32 characters long string. This is the laravel application key.</p>

<p>Laravel has an artisan command <code>php artisan key:generate</code> which generates a new <code>APP_KEY</code> for you. If you have installed Laravel via Composer or the Laravel installer, this key will be set for you automatically by the <code>key:generate</code> command.</p>

<h4 id="why-your-app-key-is-important%3F">Why your app key is important?</h4>

<p>The <code>APP_KEY</code> is used to keep your user sessions and other encrypted data secure! If the application key is not set, your user sessions and other encrypted data will not be secure. Believe it or not it is a big security risk.</p>

<p>To give you more specific context, earlier laravel had a security issue :</p>

<p><code>If your application's encryption key is in the hands of a malicious party, that party could craft cookie values using the encryption key and exploit vulnerabilities inherent to PHP object serialization / unserialization, such as calling arbitrary class methods within your application.</code></p>

<p>Do not worry, laravel later released a security update which disabled all serialization and unserialization of cookie values using <code>APP_KEY</code>. All Laravel cookies are encrypted and signed, cookie values can be considered safe from client tampering. <a href="https://laravel.com/docs/5.6/upgrade#upgrade-5.6.30"><code>clich here</code></a> to see details about this security update.</p>

<p>Before Update :</p>

<p>If used to serialize all values during encryption.</p>

<pre><code class="php">$encryptedValue = \openssl_encrypt(serialize($value), $this-&gt;cipher, $this-&gt;key, 0, $iv);
</code></pre>

<p>After Update :</p>

<p>It will serialize only if you pass second parameter as <code>true</code> while calling encrypt function.</p>

<pre><code class="php">$encryptedValue = \openssl_encrypt(
    $serialize ? serialize($value) : $value,
    $this-&gt;cipher, $this-&gt;key, 0, $iv
);
</code></pre>

<p>Okay, to sum it up, <code>APP_KEY</code> is important and any backdoor associated with it which leads to compromising app security should be closed.</p>

<h4 id="passwords-and-app_key-%3A">Passwords and APP_KEY :</h4>

<p>When we consider parts of the app which have encryption, first thing comes to mind is the user passwords. Let's take a minute to differentiate both :</p>

<ul>
<li>Encryption :</li>
</ul>

<p>Encryption is when you have a data which you want to safeguard. So you take original data, encrypt it using key and ciphers so it turns into gibrish string. This gribrish string has no meaning and hence it can not be interpreter directly toits original data meaning. When you need, you can decrypt this encrypted value to retrive it in original state.</p>

<p>Laravel has <code>Crypt</code> facade which helps us implement encryption and decryption.</p>

<p>In this case, the <code>key</code> and <code>ciphers</code> are important because those are used in decryption. And should NOT be explosed.</p>

<ul>
<li>Hashing :</li>
</ul>

<p>Hashing in simple terms is one way encryption. Once you encrypt you can NOT decrypt it in original state. You can verify if the hash matches a plain value to check if its the original value or not. But that's all you can do. It is way more secure in terms of sensitive information like user passwords.</p>

<p>Laravel has <code>Hash</code> facade which helps us implement one way hashing encryption.</p>

<p>Now, one of the main thing you should understand : APP_KEY is <code>NOT</code> used in Hashing and it is used in encryption. So your passwords security is NOT dependent on the APP_KEY. Whereas any data of your app which you have encrypted <code>do have</code> dependency on APP_KEY.</p>

<h4 id="affects-of-changing-app_key-%3A">Affects of changing APP_KEY :</h4>

<p>Before we dive into how to change APP_KEY, it is important to know what will happen if we change it. When APP_KEY is changed in an existing app :</p>

<ul>
<li>Existing user sessions will be invalidated. Hence, all your currently active logged in users will be logged out.</li>
<li>Any data in your app which you have encrypted using <code>Crypt</code> facade or <code>encrypt()</code> helper function will no longer be decrypted as the encryption uses APP_KEY.</li>
<li>Any user passwords will NOT be affected so no need to worry about that.</li>
<li>If you have more than one app servers running, all should be replaced with the same APP_KEY.</li>
</ul>

<h4 id="let%27s-handle-the-headache-first-%3A">Let's handle the headache first :</h4>

<p>As seen above, you can imagine most headache in changing APP_KEY is handling the data which is encrypted using old app key. For that you need to first decrypt the data using old APP_KEY and then re-encrypt using new APP_KEY. Damn!</p>

<p>Don't worry! Here is a simple helper function you can use :</p>

<pre><code class="php">/**
 * Function to re-encrypt when APP_KEY is rotated/changed
 * 
 * @param string $oldAppKey
 * @param mixed $value
 */
function reEncrypt($oldAppKey, $value)
{
    // Get cipher of encryption
    $cipher = config('app.cipher');
    // Get newly generated app_key
    $newAppKey = config('app.key');

    // Verify old app Key
    if (Str::startsWith($oldAppKey, 'base64:')) {
        $oldAppKey = base64_decode(substr($oldAppKey, 7));
    }
    // Verify new app Key
    if (Str::startsWith($newAppKey, 'base64:')) {
        $newAppKey = base64_decode(substr($newAppKey, 7));
    }

    // Initialize encryptor instance for old app key
    $oldEncryptor = new Illuminate\Encryption\Encrypter((string)$oldAppKey, $cipher);

    // Initialize encryptor instance for new app key
    $newEncryptor = new Illuminate\Encryption\Encrypter((string)$newAppKey, $cipher);

    // Decrypt the value and re-encrypt
    return $newEncryptor-&gt;encrypt($oldEncryptor-&gt;decrypt($value));
}
</code></pre>

<p>Let's imagine we have a column called <code>bank_account_number</code> in <code>users</code> table which is stored as encrypted string. I have another column called <code>old_bank_account_number</code> in the <code>users</code> table to store old value as a backup before we save newly re-encrypted value. We can create a command <code>php artisan encryption:rotate</code> :</p>

<pre><code class="php">&lt;?php

namespace App\Console\Commands;

use App\User;
use Illuminate\Console\Command;
use Illuminate\Encryption\Encrypter;

class EncryptionRotateCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'encryption:rotate {--oldappkey= : Old app key}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Re-encrypt when APP_KEY is rotated';

    /**
     * Create a new command instance.
     *
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Function to re-encrypt when APP_KEY is rotated/changed
     * 
     * @param string $oldAppKey
     * @param mixed $value
     */
    public function handle()
    {
        // Get the old app key
        $oldAppKey = $this-&gt;option('oldappkey');

        // Get cipher of encryption
        $cipher = config('app.cipher');
        // Get newly generated app_key
        $newAppKey = config('app.key');

        // Verify old app Key
        if (Str::startsWith($oldAppKey, 'base64:')) {
            $oldAppKey = base64_decode(substr($oldAppKey, 7));
        }
        // Verify new app Key
        if (Str::startsWith($newAppKey, 'base64:')) {
            $newAppKey = base64_decode(substr($newAppKey, 7));
        }

        // Initialize encryptor instance for old app key
        $oldEncryptor = new Encrypter((string)$oldAppKey, $cipher);

        // Initialize encryptor instance for new app key
        $newEncryptor = new Encrypter((string)$newAppKey, $cipher);

        User::all()-&gt;each(function($user) use($oldEncryptor, newEncryptor){

            // Stored value in a backup column
            $user-&gt;old_bank_account_number  = $user-&gt;bank_account_number;

            // Decrypt the value and re-encrypt
            $user-&gt;bank_account_number  = $newEncryptor-&gt;encrypt($oldEncryptor-&gt;decrypt($user-&gt;bank_account_number));
            $user-&gt;save();

        });

        $this-&gt;info('Encryption completed with newly rotated key');
    }
}
</code></pre>

<h3 id="update-%3A">Update :</h3>

<p>I have pushed a new package which helps to simplify above implementation. <a href="https://github.com/techsemicolon/laravel-app-key-rotation"><code>click here</code></a> to view the Laravel package.</p>

<h4 id="rotating-the-key-%3A">Rotating the key :</h4>

<p>Finally, lets rotate the key.</p>

<pre><code>- Run `php artisan down` on all instances so that no user can interact until this is done
- Go to terminal on one of the instance and open your `.env` file. 
- Copy the APP_KEY value which is the old(existing) app key
- Run `php artisan key:generate` which will generate a new APP_KEY
- Run the helper command as we created above to re-encrypt the values `php artisan encryption:rotate --oldappkey=your_old_app_key_value`
- Replace the APP_KEY key on all remaining instances
- Run `php artisan config:clear` on all instances
- Run `php artisan cache:clear` on all instances
- Run `php artisan view:clear` on all instances
- Run `php artisan view:clear` on all instances
- Run `php artisan up` on all instances
</code></pre>

<p>And.. It's done! You can do this based on key rotation frequency you are comfortable in. I would recommend at-least once in 3 months.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel restricting unfiltered queries]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/01/04/laravel-restricting-unfiltered-queries/"/>
            <updated>2019-01-04T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/01/04/laravel-restricting-unfiltered-queries/</id>
            <content type="html"><![CDATA[<p>Laravel eloquent is a very powerful ORM. I came across a situation for a project of mine long time ago. There was a table <code>api_logs</code> which basically logged all API requests and responses. Evidently the table grew exponentially. One of the developers created an analytics module in which he forgot to add a where clause. It queried millions of rows at a time on production. It was a silly mistake but server was overwhelmed and you can imagine the rest of story (I can tell you it is not that good).</p>

<p>I imagined if there was a way to just throw an error if any function queries all rows from a table like <code>api_logs</code>. Two advantages :</p>

<ul>
<li>Error will be thrown during the development cycle where it's like an eye opener for the developer to make sure he adds filters.</li>
<li>If the develolper pushed the code to live by mistake, someone requesting the page will get the error page. I will be still having advantage with x% of customers getting an error rather than 100% of customer not using website when memory is exhausted. (If that query was in the header or footer on every page then basically it's over haha!)</li>
</ul>

<h4 id="implementation-%3A">Implementation :</h4>

<p>Short and simple, nothing fancy. We will just intercept an eloquent model for every query and check if it has a where clause. The best place for that is <code>boot</code> method of the model. I wish laravel has <code>retreiving</code> observer just like <code>created</code>, <code>updated</code> etc, which intercepts the query before it hits the database connection. (I am guessing as observers basically observes the state of a model instance, the state prior to <code>retreiving</code> is ideally an inception step of preparing collection of models/model and not yet a prime state to observe. And hence no such observer yet available.)</p>

<p>We can however use <code>\DB::listen()</code> listener as follows :</p>

<pre><code class="php">&lt;?php

namespace App\Model;

use Illuminate\Database\Eloquent\Model;

class ApiLog extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'api_logs';


    /**
     * The "booting" method of the model.
     *
     * @return void
     */
    public static function boot(){

        parent::boot();

        \DB::listen(function($query) {
            //
        }); 
    }
}
</code></pre>

<p>Note that for Laravel version <code>5.1</code> and lower, the parameters of listen callback are <code>$sql, $bindings, $time</code> instead of just <code>$query</code>;</p>

<p>Now we have an listener, we need to get the query and check if it is selecting all rows. We will do it by regex on the raw sql.</p>

<pre><code class="php">&lt;?php

    \DB::listen(function($query) {

        $table = (new self)-&gt;table;
        $pattern = "/from(\s)*?`?$table`?(\s)*$/m";

        if(preg_match($pattern, $query-&gt;sql)){
            throw new \Exception("Error : Running unfiltered queries on `$table` table is not allowed!");
        }
    }); 
}
</code></pre>

<p>Above preg match will catch all queries which do not have any clauses after the table syntax. Those can be select, update or delete queries.</p>

<p>Let's make this little more manageable by creating a trait and then using it in model. Create <code>RestrictsUnfilteredQueries.php</code> :</p>

<pre><code class="php">&lt;?php 

namespace App\Model;

trait RestrictsUnfilteredQueries
{
    /**
     * Restrict unfiltered queries
     * 
     * @return void
     * @throws \Exception
     */
    public static function restrictUnfilteredQueries()
    {
        \DB::listen(function($query) {

            $table = (new self)-&gt;table;
            $pattern = "/from(\s)*?`?$table`?(\s)*$/m";

            if(preg_match($pattern, $query-&gt;sql)){
                throw new \Exception("Error : Running unfiltered queries on `$table` table is not allowed!");
            }
        }); 
    }
}
</code></pre>

<p>Using in the model's boot method :</p>

<pre><code class="php">&lt;?php

namespace App\Model;

use Illuminate\Database\Eloquent\Model;
use App\Model\RestrictsUnfilteredQueries;

class ApiLog extends Model
{
    use RestrictsUnfilteredQueries;

    /**
     * The table associated with the model.
     *
     * @var string
     */
    protected $table = 'api_logs';


    /**
     * The "booting" method of the model.
     *
     * @return void
     */
    public static function boot(){

        parent::boot();

        self::restrictUnfilteredQueries(); 
    }
}
</code></pre>

<p>And done! Now your server RAM will thank you forever for this ;)</p>

<p>Note that this will not work when you query using DB facade like <code>DB::select()</code> or <code>DB::table()-&gt;get()</code>.</p>

<p>You may alternatively cater this as well by having <code>DB::listen()</code> inside a service provider's boot method. It will listen to all sort of queries. However, it might be too much to listen all queries.</p>

<p>There might be better way of implementing the same, I did it this way considering the urgency of situation. It is still there in project since then and working perfectly.</p>
]]></content>
        </entry>
    </feed>