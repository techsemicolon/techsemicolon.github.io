<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/tags/logs.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2020-02-05T12:38:41+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Stream Nginx and PHP FPM logs into AWS cloudwatch]]></title>
            <link href="https://techsemicolon.github.io/blog/2020/02/04/stream-nginx-fpm-logs-into-aws-clodwatch/"/>
            <updated>2020-02-04T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2020/02/04/stream-nginx-fpm-logs-into-aws-clodwatch/</id>
            <content type="html"><![CDATA[<p>When you have a web application running on AWS instances, you may have control over some cloud monitors of the instances such as <code>Memory Usage</code>, <code>CPU Utilization</code> or even metrics related to storage space. But :</p>

<ul>
<li>What if you want to have your nginx and PHP FPM logs steamed on AWS?</li>
<li>You want to set up a cloudwatch alarm if nginx throws an error?</li>
<li>You have an autoscaling setup and you want to steam nginx logs of all servers at a central log group on cloudwatch?</li>
<li>You do not want to incorporate any 3rd party monitoring tool and want to stick to AWS?</li>
<li>Last but not the least, you want it to be cost effective as logs are going to pile up as time goes?</li>
</ul>

<p>Well, this is all possible now! Let's find out how...</p>

<h4 id="aws-cloudwatch-agent-%3A">AWS Cloudwatch Agent :</h4>

<p>The first and very basic question comes to mind when streaming any custom log file into AWS cloudwatch is : <code>How I am going to stream the logs continously to AWS cloudwatch</code> The answer is using <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html"><code>AWS Cloudwatch Agent</code></a></p>

<p>On a broader level, once you install AWS Cloudwatch Agent on your EC2 instance, it's going to have a service called <code>awslogs</code> available for you. This service is responsible for streaming any log file you wish to track on AWS cloudwatch. This service will take care of how to push the logs, how much log buffer to push at a time, how much kbs of data to push at a time and so on.</p>

<p>As any unix service would have, the <code>awslogs</code> service also has very handy configuration file using which you can tweak the above parameters which contribute to pushing the log stream into AWS cloudwatch.</p>

<h3 id="giving-permissions-to-push-to-cloudwatch-%3A">Giving permissions to push to cloudwatch :</h3>

<p>When we have the AWS Cloudwatch agent installed and the <code>awslogs</code> service running, you will expect the log streaming on AWS cloudwatch inside AWS region you specified. But, it will not work directly.</p>

<p>This is because, the instance should have permission to push logs into cloudwatch. For this we will create a new policy called <code>AWS-cloudwatch-agent-policy</code>.</p>

<ol>
<li>Login to AWS Console and go to <code>IAM</code> service.</li>
<li>Go to <code>Policies</code> from the L.H.S. menu</li>
<li>Click on <code>Create Policy</code></li>
<li>A visual editor for policy will be shown. But we are going to save time here. Click on the <code>json</code> tab and enter following json in there :</li>
</ol>

<pre><code class="json">{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
            ],
            "Resource": [
                "arn:aws:logs:*:*:*"
            ],
            "Condition": {
                "StringEquals": {
                    "aws:RequestedRegion": "xx-xxxx-x"
                }
            }
        }
    ]
}
</code></pre>

<p>Make sure you replace <code>xx-xxxx-x</code> with the region you want to steam logs into. e.g. <code>us-west-1</code>
5. Click on <code>Review Policy</code>
6. Give <code>Name</code> as <code>AWS-cloudwatch-agent-policy</code>. If you want to be specific(which I would recommend), add the region name in there e.g. <code>AWS-cloudwatch-agent-policy-us-west-1</code>
7. Give <code>Description</code> and click on <code>Create Policy</code></p>

<p>Now, we have the policy ready. We need to attach this policy to an <code>IAM User</code> or <code>IAM Role</code> so that EC2 instance can stream logs into AWS cloudwatch. There are 2 ways to do it :</p>

<p>A. If your EC2 instance is having an instance IAM role attached to it, then simply attach this policy to that role. You can find this by going into <code>EC2 instances</code> section and looking for instance property called <code>IAM Role</code>.</p>

<p>OR</p>

<p>B. If you do not have any IAM role attached to your instance, then create a new IAM user with name <code>AWS-cloudwatch-agent-user</code> with ONLY <code>programatic access</code> enabled. Then attach the policy we created above to this user. Make sure you save the <code>Access Keys</code> and <code>Secret Access Keys</code> for this user. We will need it shortly.</p>

<h4 id="installing-the-agent-%3A">Installing the agent :</h4>

<p>Now that we have the permissions sorted out, let's install AWS cloudwatch agent, which is the easiest task to do. I am using an <code>ubuntu</code> EC2 instance so I will follow the steps relevent to it in this article. If you are using any other operating systems, feel free to visit the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/install-CloudWatch-Agent-on-EC2-Instance.html">installation documentation</a></p>

<ol>
<li>SSH into your ubuntu EC2 instance</li>
<li>Run following commands :</li>
</ol>

<pre><code class="bash"># Switch to root user
sudo -s
# Update the packages
apt-get update -y
# Download the ubuntu cloudwatch agent setup file
cd /root
curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
# Install the cloudwatch agent
# Make sure you replace xx-xxxx-x with your region e.g. us-west-1
sudo python ./awslogs-agent-setup.py --region=xx-xxxx-x
</code></pre>

<ol start="3">
<li>Once you run the <code>awslogs-agent-setup.py</code>, it will ask you couple of questions in the prompt like below :</li>
</ol>

<p>When it will ask for <code>AWS Access Key ID</code> &amp; <code>AWS Secret Access Key</code>, if you have chosen the option A in previous section which is using <code>IAM Role</code> of the instance, then press continue(enter) without anything. If you have chosen the option B which is using an <code>IAM User</code> with programatic access, add the <code>AWS Access Key ID</code> &amp; <code>AWS Secret Access Key</code> of that user and then proceed with the prompt.</p>

<p>On the remaining prompt, just follow what we have below. We will just start with basic bare bones because, we are going to update these settings from config file in next step.</p>

<pre><code class="bash">Step 1 of 5: Installing pip ...libyaml-dev does not exist in system DONE

Step 2 of 5: Downloading the latest CloudWatch Logs agent bits ... DONE

Step 3 of 5: Configuring AWS CLI ...
AWS Access Key ID [None]:
AWS Secret Access Key [None]:
Default region name [us-west-1]:
Default output format [None]:

Step 4 of 5: Configuring the CloudWatch Logs Agent ...
Path of log file to upload [/var/log/syslog]:
Destination Log Group name [/var/log/syslog]:

Choose Log Stream name:
  1. Use EC2 instance id.
  2. Use hostname.
  3. Custom.
Enter choice [1]: 1

Choose Log Event timestamp format:
  1. %b %d %H:%M:%S    (Dec 31 23:59:59)
  2. %d/%b/%Y:%H:%M:%S (10/Oct/2000:13:55:36)
  3. %Y-%m-%d %H:%M:%S (2008-09-08 11:52:54)
  4. Custom
Enter choice [1]: 3

Choose initial position of upload:
  1. From start of file.
  2. From end of file.
Enter choice [1]: 2
More log files to configure? [Y]: N

Step 5 of 5: Setting up agent as a daemon ...DONE


------------------------------------------------------
- Configuration file successfully saved at: /var/awslogs/etc/awslogs.conf
- You can begin accessing new log events after a few moments at https://console.aws.amazon.com/cloudwatch/home?region=us-west-1#logs:
- You can use 'sudo service awslogs start|stop|status|restart' to control the daemon.
- To see diagnostic information for the CloudWatch Logs Agent, see /var/log/awslogs.log
- You can rerun interactive setup using 'sudo python ./awslogs-agent-setup.py --region us-west-1 --only-generate-config'
</code></pre>

<h3 id="testing-the-initial-setup-%3A">Testing the initial setup :</h3>

<p>Let's first check if the <code>awslogs</code> service is running :</p>

<pre><code class="bash">sudo service awslogs status
</code></pre>

<p>This should show as active.</p>

<p>Now let's see if our instance is streaming anything :</p>

<pre><code class="bash">sudo tail -f /var/log/awslogs.log
</code></pre>

<p>You should either see something like <code>cwlogs.push.publisher</code> which is publishing log successfully. If you have any issue with permissions, you should see the error here.</p>

<p>If everything is working, you should see a log group called <code>/var/log/syslog</code> when you visit https://console.aws.amazon.com/cloudwatch/home?region=xx-xxxx-x#logs: where <code>xx-xxxx-x</code> is your AWS region. If you click on the log group, you should see syslogs streaming in there. whohooo!</p>

<p><img src="/images/aws-cloudwatch-agent/log-group.png" alt="AWS CloudWatch Log Group" /></p>

<p><img src="/images/aws-cloudwatch-agent/log-stream.png" alt="AWS CloudWatch Log Stream" /></p>

<h3 id="updating-the-configurations-%3A">Updating the configurations :</h3>

<p>Let's first stop the <code>awslogs</code> service for a moment to avoid any syslogs steaming into AWS cloudwatch.</p>

<pre><code class="bash">sudo service awslogs stop
</code></pre>

<p>Now, we are going to update the configuration file <code>/var/awslogs/etc/awslogs.conf</code>. Edit this file and add below contents in it :</p>

<pre><code>[general]
state_file = /var/awslogs/state/agent-state

[nginx]
file = /var/log/nginx/error.log
log_group_name = nginx_error_logs
log_stream_name = {instance_id}-{hostname}
datetime_format = %b %d %H:%M:%S
initial_position = end_of_file

[phpfpm]
file = /var/log/php7.2-fpm.log
log_group_name = php_fpm_logs
log_stream_name = {instance_id}-{hostname}
datetime_format = %b %d %H:%M:%S
initial_position = end_of_file
</code></pre>

<p>Note : Make sure you verify the log file paths as per your server settings.</p>

<p>Let's quickly go over what we have set. The <code>general</code> section is what this service needs to keep its state intact. We have kept it as it is.</p>

<p>The next 2 sections <code>nginx</code> and <code>phpfpm</code> will stream the logs. 
1. <code>file</code> : The absolute path of the respective log file
2. <code>log_group_name</code> : Log group which will cloud all similar logs together in AWS cloudwatch
3. <code>log_stream_name</code> : The name of the stream of this log group pushed from an instance
4. <code>datetime_format</code> : The format of logged timestemp
5. <code>initial_position</code> : If you would like to stream the new lines from end of the time or from begining of the file(start_of_file)</p>

<p>If you wish to know more about these options, visit this <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html">documentation</a></p>

<p>Once you save this file, start the <code>awslogs</code> service :</p>

<pre><code class="bash">sudo service awslogs start
</code></pre>

<p>Finally, you will now see nginx and phpfpm logs steaming into your AWS cloudwtch logs in their respective log groups.</p>

<h4 id="avoiding-streaming-of-notices-and-warnings-%3A">Avoiding streaming of notices and warnings :</h4>

<p>At this point in your setup, the <code>awslogs</code> service will stream every log entry from the files you are streaming, no matter if it's an <code>info</code>, <code>notice</code>, <code>warning</code> or an <code>error</code>.</p>

<p>You would not want to pile up your AWS cloudwatch logs with anything which you do not want to track. You can get around this from choosing either of below options :</p>

<p>A. Updating nginx and php fpm service configurations and making sure their log levels are set just to log <code>errors</code> or <code>warnings</code> if you want.
B. You can use the <code>awslogs</code> configuration option called <code>multi_line_start_pattern</code> where you can specify a regex which will determine the start of the line.</p>

<h4 id="setting-up-a-cloudwatch-alarm-%3A">Setting up a cloudwatch alarm :</h4>

<p>Now that we have the nginx and phpfpm logs into AWS cloudwatch, it's time to do the main step. Let's set up an alarm.</p>

<ol>
<li>Login to AWS Console and go to <code>Cloudwatch</code> service.</li>
<li>Go to <code>Alarms &gt; Alarm</code> from the L.H.S. menu</li>
<li>Click on <code>Create Alarm</code></li>
<li>Click on <code>Select Metric</code> and search for <code>Log Group</code>, you will see <code>Logs &gt; Log Group Metrics</code>, select that</li>
<li>From <code>LogGroupName</code>, select the log group you want to monitor. You should see <code>nginx_error_logs</code> and <code>php_fpm_logs</code> in the listing, choose any one of them</li>
<li>You will see the screen where we specify the alarm conditions. You can set duration of 5 minutes for a static threshold when incoming logs are greater than 50. This means that if for a period of 5 minutes, if any of the log group we select have more than 50 logs, this alarm will go on.</li>
</ol>

<p><img src="/images/aws-cloudwatch-agent/log-alarm.png" alt="AWS CloudWatch Log Alarm" /></p>

<h4 id="pricing-%3A">Pricing :</h4>

<p>The AWS cloudwatch agent is free because it's a native service running on your instance. However, what you pay is for the amount of logs you collect, stream and store over AWS cloudwatch. You can check the pricing from their <a href="https://aws.amazon.com/cloudwatch/pricing/">documentation</a>. However, you will find it's much cheaper than most of the 3rd party services providing similar log monitoring service.</p>

<h4 id="final-words-%3A">Final words :</h4>

<p>It's said that you can spread over different cloud providers or service providers to explore more. But in my experience, AWS has these native options which are cost effective, easy and standard to set up.. Plus you have everything in one console, you should definitely give it a try before shifting to a 3rd party solution implementing the same thing.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New AWS EC2 instance connect can save you instance ssh headaches]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/10/20/now-aws-ec2-aws-instance-connect-can-save-you-instance-user-ssh-headaches/"/>
            <updated>2019-10-20T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/10/20/now-aws-ec2-aws-instance-connect-can-save-you-instance-user-ssh-headaches/</id>
            <content type="html"><![CDATA[<p>AWS EC2 is one of the most commonly used service for hosting instances on AWS cloud. When you have multiple team members, you have to handle headaches of managing their SSH acces. Well... What if I tell you that now :</p>

<ul>
<li>You can manage EC2 ssh access by adding just AWS IAM user policy. Oh yes! You read that right!</li>
<li>NO need to add SSH keys and manage those on your own for providing access to users in the organization</li>
<li>NO need to release production instance updates to add or remove new users and their SSH keys</li>
<li>NO need to worry about the key rotation, key management done by AWS automatically</li>
<li>All connection requests using EC2 Instance Connect are logged to AWS CloudTrail so that you can audit connection requests</li>
<li>Optionally, If your instance is publically accessible, you can SSH directly from an AWS browser shell window without even doing SSH locally</li>
<li>Last but not the least, you can set this up entirely on an instance under just 15 minutes</li>
</ul>

<p>This is all possible now, thanks to the new AWS service called <code>EC2 instance connect</code>. If this does not convince you to explore more about this, nothing else will!</p>

<h4 id="aws-instance-connect-%3A">AWS Instance Connect :</h4>

<p>This is by far one of my favorite AWS service announcement of 2019. We all have had our headaches to manage SSH keys on EC2 instances, add new keys for new users, rotate the keys to add more security, remove the keys for users who left the company. Oh man, give me more tissues!</p>

<p>But the new <code>AWS EC2 connect</code> is the ultimate saviour.</p>

<p><code>AWS EC2 Instance Connect</code> provides a simple and secure way to connect to your instances using <code>Secure Shell (SSH)</code>. With EC2 Instance Connect, you use <code>AWS Identity and Access Management</code> (IAM) policies and principals to control SSH access to your instances, removing the need to share and manage SSH keys. All connection requests using EC2 Instance Connect are logged to <code>AWS CloudTrail</code> so that you can audit connection requests.</p>

<p>You can use Instance Connect to connect to your Linux instances using one or all of below :</p>

<ul>
<li>A browser-based client</li>
<li>The Amazon EC2 Instance Connect CLI</li>
<li>The SSH client of your choice.</li>
</ul>

<p>The cheery on the top is <code>temporary nature of the SSH public key</code>. When you connect to an instance using EC2 Instance Connect, the instance connect API pushes a <code>one time use SSH public key</code> to the instance which is getting connected. It uses instance metadata for the same. And it key just stays there for <code>60 seconds</code>, so that SSH is done correctly. That key is then removed and for next connection the same process is done internally by AWS EC2 instance connect.</p>

<p>An IAM policy attached to your IAM user authorizes your IAM user to push the public key to the instance metadata and for the users who do not have this policy attached, they can not connect to the instance.</p>

<p>The SSH daemon internally uses AuthorizedKeysCommand and AuthorizedKeysCommandUser, which are configured when Instance Connect is installed, to look up the public key from the instance metadata for authentication, and connects you to the instance.</p>

<p>Isn't that awesome!</p>

<h3 id="a-heads-up-on-instance-os-support-%3A">A heads up on instance OS support :</h3>

<p>The EC2 instance connect is currently supported for :</p>

<ul>
<li>Amazon Linux 2 having any version</li>
<li>Ubuntu 16.04 or later versions</li>
</ul>

<p>Hoping that AWS will add support for the other operating systems!</p>

<h3 id="step-1---spinning-up-the-ec2-server-to-dryrun-ecv2-instance-connect-%3A">Step 1 - Spinning up the EC2 server to dryrun ECV2 Instance Connect :</h3>

<p>I would highly recommend to NOT try installing anything on your working instance. It is always safe to try it out on a small vanilla instance, know the gotchas and then be prepared to do it on production or any of your existing instances. So for the dryrun we will spin up a test EC2 instance.</p>

<ul>
<li>Login to your AWS Console and go to the region you want the instance to be in</li>
<li>Select EC2 service and click on <code>Launch</code> to spin up a new instance</li>
<li>The EC2 launch wizard will be shown, search for <code>ubuntu</code> and press <code>enter</code></li>
<li>It will show number of ubuntu AMIs. Let's choose <code>Ubuntu Server 18.04 LTS</code></li>
<li>Now click on <code>select</code></li>
<li>Click on <code>continue</code> and choose instance type as <code>t2.micro</code> as it is inside the <code>free tier</code> usage</li>
<li>Click on <code>Next: Configure Instance Details</code></li>
<li>In this step you dont need to worry about VPC and instance role as this instance is just a test one. You can keep the default settings</li>
<li>Click on <code>Next: Add Storage</code></li>
<li>Keep the default storage as it is as we won't need any extra storage space</li>
<li>Click on <code>Next: Add Tags</code> and add the tags you need for this instance</li>
<li>Click on <code>Next: Configure Security Group</code></li>
<li>You need to select <code>Create a new security group</code>. Add security group name as <code>Temporary EC2 Connect SG</code>. And add just a rule for port 22(SSH) open to all with value <code>0.0.0.0/0</code></li>
<li>Click on <code>Review and Launch</code></li>
<li>Verify the details once in this final summary screen and click on <code>Launch</code></li>
<li>It will ask you to select a <code>key pair</code> create a new one as <code>EC2-Connect-Dryrun-key-pair</code> and download it.</li>
<li>Now finally.. Click on <code>Launch Instances</code></li>
</ul>

<p>You are done with launching the instance..</p>

<h4 id="step-2-%3A-install-ec2-instance-connect-on-the-instance-%3A">Step 2 : Install EC2 Instance Connect on the instance :</h4>

<p>Now, we will install EC2 instance connect service on our new EC2 instance with AWS CLI. You can SSH to your instance using following command :</p>

<pre><code class="bash">ssh -i EC2-Connect-Dryrun-key-pair.pem ubuntu@x.x.x.x
</code></pre>

<p>Where x.x.x.x is the new instance IP address. Now you can use below set of commands to install AWS CLI and then EC2 instance connect :</p>

<pre><code class="bash"># Update the packages as we are logging to the instance for the first time
sudo apt-get -y update
# Install python 3 and pip3 which is needed to install AWS CLI
sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
sudo apt install -y python3.7 python3-pip
# Install AWS CLI
sudo pip3 install awscli --upgrade --user
# Install EC2 instance connect
sudo apt-get install -y ec2-instance-connect
# Make sure instance connect files are created properly
ls -1  /usr/share/ec2-instance-connect/
</code></pre>

<p>You can verify the instance connect has updated the ssh setting by running follwing command :</p>

<pre><code class="bash">sudo cat /lib/systemd/system/ssh.service.d/ec2-instance-connect.conf
</code></pre>

<p>This should give output containing following strings :</p>

<pre><code class="bash">AuthorizedKeysCommand /usr/share/ec2-instance-connect/eic_run_authorized_keys %u %f
AuthorizedKeysCommandUser ec2-instance-connect
</code></pre>

<p>Now, you are done with the setup on your instance. Believe it or not, that is it for the instance changes!</p>

<h4 id="step-3-%3A-create-policy-to-allow-ssh-connect-access-%3A">Step 3 : Create policy to allow SSH Connect Access :</h4>

<p>We will create a new <code>IAM policy</code> which we can attach to a user so that user can SSH to the instance. Below is the policy JSON :</p>

<pre><code class="json">{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": "ec2-instance-connect:SendSSHPublicKey",
        "Resource": [
            "arn:aws:ec2:region:account-id:instance/i-1234567890abcdef0",
            "arn:aws:ec2:region:account-id:instance/i-0598c7d356eba48d7"
        ],
        "Condition": {
            "StringEquals": {
                "ec2:osuser": "ubuntu"
            }
        }
      },
      {
        "Effect": "Allow",
        "Action": "ec2:DescribeInstances",
        "Resource": "*"
      }
    ]
}
</code></pre>

<p>Make sure you replace the resources with their respective arns. e.g. <code>arn:aws:ec2:us-west-1:12341274:instance/i-1234567890abcdef0</code> where region is <code>us-west-1</code> and account id is <code>12341274</code>.</p>

<p>Let's now understand this policy. This policy will allow user to send a new SSH public key to the instances specified in the resources array. This pushed public key will allow the SSH connection to the instance.</p>

<p>The <code>ec2:osuser</code> as <code>ubuntu</code> is the SSH connection linux user. Realistically <code>ubuntu</code> is the main super user. We will change this on the last part of this article where we can have different linux user having less priviledges on the instance. For now, let's keep going.</p>

<p>The second policy rule <code>ec2:DescribeInstances</code> is used by the user to get instance details from its instance id. We will be using instance id instead of public or private DNS or IP. So this rule is required in the policy so that part of the process works.</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select IAM service and click on <code>Policies</code> tab on the left menu</li>
<li>Click on <code>Create Policy</code></li>
<li>Click on <code>JSON</code> tab and enter above policy JSON in it. Make sure you replace the instance ARN as per your instance metadata details</li>
<li>Click on <code>Review Policy</code></li>
<li>Give policy name as <code>EC2-SSH-Access</code> and enter description you need</li>
<li>Click on <code>Create</code></li>
</ul>

<p>Now we have the policy ready which can give access to any user to connect to the instance via Secure Shell (SSH).</p>

<h4 id="step-4-%3A-create-a-new-user-and-attach-policy-%3A">Step 4 : Create a new User and attach policy :</h4>

<p>We will create a new user as <code>user-with-ssh-access</code> and attach above policy.</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select IAM service and click on <code>Users</code> tab on the left menu</li>
<li>Click on <code>Add User</code></li>
<li>Give user name as <code>user-with-ssh-access</code></li>
<li>In <code>Select AWS access type</code> choose <code>Programmatic access</code></li>
<li>Click on <code>Next: Permissions</code></li>
<li>In set permiossions tab choose <code>Attach existing policies directly</code></li>
<li>Search our policy <code>EC2-SSH-Access</code> and select it</li>
<li>Click on <code>Next: Tags</code> and add tags as per your need</li>
<li>Click on <code>Next</code> which will review your user</li>
<li>Click on <code>Create</code></li>
</ul>

<p>Now, we will need to add AWS credentials to this user so that we can use those to connect.</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select IAM service and click on <code>Users</code> tab on the left menu</li>
<li>Search our user <code>user-with-ssh-access</code> and click on it</li>
<li>User <code>Summary</code> page will appear, click on <code>Security credentials</code> tab</li>
<li>In <code>Access Keys</code> section click on <code>Create access key</code></li>
<li>It will give you <code>Access Key Id</code> and <code>Secret Access Key</code>. Make sure you save it locally in notepad or somewhere safe as we will need it to ssh to the instance</li>
</ul>

<h4 id="step-5-%3A-setting-up-local-system-for-secure-shellssh-connection-%3A">Step 5 : Setting up local system for Secure Shell(SSH) connection :</h4>

<p>Locally you need to have AWS CLI installed. If you do not have it, make sure you install it. <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html">Click Here</a> to folow the steps.</p>

<p>Once install run following on your terminal :</p>

<pre><code class="bash">aws configure
</code></pre>

<p>If you get error like <code>aws command not found</code> find where the aws service is installed on your computer by doing <code>which aws</code>. Sometimes you need to add full path like <code>/usr/local/bin/aws configure</code></p>

<p>It will ask you details like below :</p>

<pre><code class="bash">AWS Access Key ID : ********************
AWS Secret Access Key : ****************************
Default region name [None]: us-west-1
Default output format [None]:
</code></pre>

<p>Make sure you add the access key and secret access key we got from earlier step and specify the region in which your EC2 instance resides.</p>

<p>Now, you need to also install <code>EC2 Instance Connect</code> on your local system as it is used to ssh to the instance. Use following command to do the same :</p>

<pre><code class="bash">sudo pip install ec2instanceconnectcli
</code></pre>

<p>And done! Your local system is ready to SSH connect!</p>

<h4 id="step-5-%3A-connect-to-the-instance-via-secure-shellssh-%3A">Step 5 : Connect to the instance via Secure Shell(SSH) :</h4>

<p>After all above steps are done, we can now SSH to our instance. To ssh we will use <code>mssh</code> command which ships with EC2 instance connect service.</p>

<pre><code class="bash">mssh ubuntu@i-xxxxxxxxxxxxxxx
</code></pre>

<p>Where <code>i-xxxxxxxxxxxxxxx</code> is the instance id of our test instance we spun up in step 1. You would be able to SSH to the instance if you have followed above steps correctly.</p>

<h4 id="real-world-use-cases-for-ssh-users-%3A">Real world use cases for SSH users :</h4>

<p>In above setup, we used <code>ubuntu</code> user to SSH connect. However, in real world we can divide our organizational users who need access into groups based on access they need. For example :</p>

<ul>
<li>You can create a user named <code>administrator</code> on your EC2 instance and then use that as <code>ec2:osuser</code> in our policy for system administrators.</li>
<li>You can create a user named <code>developer</code> on your EC2 instance and then use that as <code>ec2:osuser</code> in our policy for application team which might have access to just the application codebase.</li>
</ul>

<p>Please note that what access and permission the connected user must have is in your hands. The responsibility of EC2 instance connect is just to allow the IAM user to SSH to the instance with allowed SSH user.</p>

<p><a href="https://aws.amazon.com/premiumsupport/knowledge-center/new-user-accounts-linux-instance/">Click Here</a> to know more about quick steps to add new user to the instance.</p>

<h4 id="managing-the-ssh-access-%3A">Managing the ssh access :</h4>

<p>You can create multiple policies based on the resources and os username the IAM user can SSH to. If you want to give a new user ssh access, you can just attach respective policy to the user. Similarly, you can just remove an existing ssh cononect policy to remove the SSH access from an existing user.</p>

<p>This is a HUGEEEE plus point of this service.</p>

<h4 id="accessing-the-connection-logs-%3A">Accessing the connection logs :</h4>

<p>EC2 connect pushes the SSH connection logs to <code>AWS Cloudtrail</code>. To view the logs follow below steps :</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select Clourtrail service and go to the region you have EC2 instance connect resources in</li>
<li>Click on <code>Event History</code> tab on the left menu</li>
<li>Addd <code>Event source</code> as the filter type and enter <code>ec2-instance-connect.amazonaws.com</code> as it's value</li>
</ul>

<p>You would be able to see all the SSH conection logs. Beautiful fact is that, even if you have 10 different IAM users using same SSH user, let's say <code>developer</code>, in the logs, you would be able to differentiate which user connected to SSH via <code>developer</code> connection user.</p>
]]></content>
        </entry>
    </feed>