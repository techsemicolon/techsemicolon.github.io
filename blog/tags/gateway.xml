<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/tags/gateway.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2019-10-22T19:39:33+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[New AWS EC2 instance connect can save you instance ssh headaches]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/10/20/now-aws-ec2-aws-instance-connect-can-save-you-instance-user-ssh-headaches/"/>
            <updated>2019-10-20T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/10/20/now-aws-ec2-aws-instance-connect-can-save-you-instance-user-ssh-headaches/</id>
            <content type="html"><![CDATA[<p>AWS EC2 is one of the most commonly used service for hosting instances on AWS cloud. When you have multiple team members, you have to handle headaches of managing their SSH acces. Well... What if I tell you that now :</p>

<ul>
<li>You can manage EC2 ssh access by adding just AWS IAM user policy. Oh yes! You read that right!</li>
<li>NO need to add SSH keys and manage those on your own for providing access to users in the organization</li>
<li>NO need to release production instance updates to add or remove new users and their SSH keys</li>
<li>NO need to worry about the key rotation, key management done by AWS automatically</li>
<li>All connection requests using EC2 Instance Connect are logged to AWS CloudTrail so that you can audit connection requests</li>
<li>Optionally, If your instance is publically accessible, you can SSH directly from an AWS browser shell window without even doing SSH locally</li>
<li>Last but not the least, you can set this up entirely on an instance under just 15 minutes</li>
</ul>

<p>This is all possible now, thanks to the new AWS service called <code>EC2 instance connect</code>. If this does not convince you to explore more about this, nothing else will!</p>

<h4 id="aws-instance-connect-%3A">AWS Instance Connect :</h4>

<p>This is by far one of my favorite AWS service announcement of 2019. We all have had our headaches to manage SSH keys on EC2 instances, add new keys for new users, rotate the keys to add more security, remove the keys for users who left the company. Oh man, give me more tissues!</p>

<p>But the new <code>AWS EC2 connect</code> is the ultimate saviour.</p>

<p><code>AWS EC2 Instance Connect</code> provides a simple and secure way to connect to your instances using <code>Secure Shell (SSH)</code>. With EC2 Instance Connect, you use <code>AWS Identity and Access Management</code> (IAM) policies and principals to control SSH access to your instances, removing the need to share and manage SSH keys. All connection requests using EC2 Instance Connect are logged to <code>AWS CloudTrail</code> so that you can audit connection requests.</p>

<p>You can use Instance Connect to connect to your Linux instances using one or all of below :</p>

<ul>
<li>A browser-based client</li>
<li>The Amazon EC2 Instance Connect CLI</li>
<li>The SSH client of your choice.</li>
</ul>

<p>The cheery on the top is <code>temporary nature of the SSH public key</code>. When you connect to an instance using EC2 Instance Connect, the instance connect API pushes a <code>one time use SSH public key</code> to the instance which is getting connected. It uses instance metadata for the same. And it key just stays there for <code>60 seconds</code>, so that SSH is done correctly. That key is then removed and for next connection the same process is done internally by AWS EC2 instance connect.</p>

<p>An IAM policy attached to your IAM user authorizes your IAM user to push the public key to the instance metadata and for the users who do not have this policy attached, they can not connect to the instance.</p>

<p>The SSH daemon internally uses AuthorizedKeysCommand and AuthorizedKeysCommandUser, which are configured when Instance Connect is installed, to look up the public key from the instance metadata for authentication, and connects you to the instance.</p>

<p>Isn't that awesome!</p>

<h3 id="a-heads-up-on-instance-os-support-%3A">A heads up on instance OS support :</h3>

<p>The EC2 instance connect is currently supported for :</p>

<ul>
<li>Amazon Linux 2 having any version</li>
<li>Ubuntu 16.04 or later versions</li>
</ul>

<p>Hoping that AWS will add support for the other operating systems!</p>

<h3 id="step-1---spinning-up-the-ec2-server-to-dryrun-ecv2-instance-connect-%3A">Step 1 - Spinning up the EC2 server to dryrun ECV2 Instance Connect :</h3>

<p>I would highly recommend to NOT try installing anything on your working instance. It is always safe to try it out on a small vanilla instance, know the gotchas and then be prepared to do it on production or any of your existing instances. So for the dryrun we will spin up a test EC2 instance.</p>

<ul>
<li>Login to your AWS Console and go to the region you want the instance to be in</li>
<li>Select EC2 service and click on <code>Launch</code> to spin up a new instance</li>
<li>The EC2 launch wizard will be shown, search for <code>ubuntu</code> and press <code>enter</code></li>
<li>It will show number of ubuntu AMIs. Let's choose <code>Ubuntu Server 18.04 LTS</code></li>
<li>Now click on <code>select</code></li>
<li>Click on <code>continue</code> and choose instance type as <code>t2.micro</code> as it is inside the <code>free tier</code> usage</li>
<li>Click on <code>Next: Configure Instance Details</code></li>
<li>In this step you dont need to worry about VPC and instance role as this instance is just a test one. You can keep the default settings</li>
<li>Click on <code>Next: Add Storage</code></li>
<li>Keep the default storage as it is as we won't need any extra storage space</li>
<li>Click on <code>Next: Add Tags</code> and add the tags you need for this instance</li>
<li>Click on <code>Next: Configure Security Group</code></li>
<li>You need to select <code>Create a new security group</code>. Add security group name as <code>Temporary EC2 Connect SG</code>. And add just a rule for port 22(SSH) open to all with value <code>0.0.0.0/0</code></li>
<li>Click on <code>Review and Launch</code></li>
<li>Verify the details once in this final summary screen and click on <code>Launch</code></li>
<li>It will ask you to select a <code>key pair</code> create a new one as <code>EC2-Connect-Dryrun-key-pair</code> and download it.</li>
<li>Now finally.. Click on <code>Launch Instances</code></li>
</ul>

<p>You are done with launching the instance..</p>

<h4 id="step-2-%3A-install-ec2-instance-connect-on-the-instance-%3A">Step 2 : Install EC2 Instance Connect on the instance :</h4>

<p>Now, we will install EC2 instance connect service on our new EC2 instance with AWS CLI. You can SSH to your instance using following command :</p>

<pre><code class="bash">ssh -i EC2-Connect-Dryrun-key-pair.pem ubuntu@x.x.x.x
</code></pre>

<p>Where x.x.x.x is the new instance IP address. Now you can use below set of commands to install AWS CLI and then EC2 instance connect :</p>

<pre><code class="bash"># Update the packages as we are logging to the instance for the first time
sudo apt-get -y update
# Install python 3 and pip3 which is needed to install AWS CLI
sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
sudo apt install -y python3.7 python3-pip
# Install AWS CLI
sudo pip3 install awscli --upgrade --user
# Install EC2 instance connect
sudo apt-get install -y ec2-instance-connect
# Make sure instance connect files are created properly
ls -1  /usr/share/ec2-instance-connect/
</code></pre>

<p>You can verify the instance connect has updated the ssh setting by running follwing command :</p>

<pre><code class="bash">sudo cat /lib/systemd/system/ssh.service.d/ec2-instance-connect.conf
</code></pre>

<p>This should give output containing following strings :</p>

<pre><code class="bash">AuthorizedKeysCommand /usr/share/ec2-instance-connect/eic_run_authorized_keys %u %f
AuthorizedKeysCommandUser ec2-instance-connect
</code></pre>

<p>Now, you are done with the setup on your instance. Believe it or not, that is it for the instance changes!</p>

<h4 id="step-3-%3A-create-policy-to-allow-ssh-connect-access-%3A">Step 3 : Create policy to allow SSH Connect Access :</h4>

<p>We will create a new <code>IAM policy</code> which we can attach to a user so that user can SSH to the instance. Below is the policy JSON :</p>

<pre><code class="json">{
    "Version": "2012-10-17",
    "Statement": [
      {
        "Effect": "Allow",
        "Action": "ec2-instance-connect:SendSSHPublicKey",
        "Resource": [
            "arn:aws:ec2:region:account-id:instance/i-1234567890abcdef0",
            "arn:aws:ec2:region:account-id:instance/i-0598c7d356eba48d7"
        ],
        "Condition": {
            "StringEquals": {
                "ec2:osuser": "ubuntu"
            }
        }
      },
      {
        "Effect": "Allow",
        "Action": "ec2:DescribeInstances",
        "Resource": "*"
      }
    ]
}
</code></pre>

<p>Make sure you replace the resources with their respective arns. e.g. <code>arn:aws:ec2:us-west-1:12341274:instance/i-1234567890abcdef0</code> where region is <code>us-west-1</code> and account id is <code>12341274</code>.</p>

<p>Let's now understand this policy. This policy will allow user to send a new SSH public key to the instances specified in the resources array. This pushed public key will allow the SSH connection to the instance.</p>

<p>The <code>ec2:osuser</code> as <code>ubuntu</code> is the SSH connection linux user. Realistically <code>ubuntu</code> is the main super user. We will change this on the last part of this article where we can have different linux user having less priviledges on the instance. For now, let's keep going.</p>

<p>The second policy rule <code>ec2:DescribeInstances</code> is used by the user to get instance details from its instance id. We will be using instance id instead of public or private DNS or IP. So this rule is required in the policy so that part of the process works.</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select IAM service and click on <code>Policies</code> tab on the left menu</li>
<li>Click on <code>Create Policy</code></li>
<li>Click on <code>JSON</code> tab and enter above policy JSON in it. Make sure you replace the instance ARN as per your instance metadata details</li>
<li>Click on <code>Review Policy</code></li>
<li>Give policy name as <code>EC2-SSH-Access</code> and enter description you need</li>
<li>Click on <code>Create</code></li>
</ul>

<p>Now we have the policy ready which can give access to any user to connect to the instance via Secure Shell (SSH).</p>

<h4 id="step-4-%3A-create-a-new-user-and-attach-policy-%3A">Step 4 : Create a new User and attach policy :</h4>

<p>We will create a new user as <code>user-with-ssh-access</code> and attach above policy.</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select IAM service and click on <code>Users</code> tab on the left menu</li>
<li>Click on <code>Add User</code></li>
<li>Give user name as <code>user-with-ssh-access</code></li>
<li>In <code>Select AWS access type</code> choose <code>Programmatic access</code></li>
<li>Click on <code>Next: Permissions</code></li>
<li>In set permiossions tab choose <code>Attach existing policies directly</code></li>
<li>Search our policy <code>EC2-SSH-Access</code> and select it</li>
<li>Click on <code>Next: Tags</code> and add tags as per your need</li>
<li>Click on <code>Next</code> which will review your user</li>
<li>Click on <code>Create</code></li>
</ul>

<p>Now, we will need to add AWS credentials to this user so that we can use those to connect.</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select IAM service and click on <code>Users</code> tab on the left menu</li>
<li>Search our user <code>user-with-ssh-access</code> and click on it</li>
<li>User <code>Summary</code> page will appear, click on <code>Security credentials</code> tab</li>
<li>In <code>Access Keys</code> section click on <code>Create access key</code></li>
<li>It will give you <code>Access Key Id</code> and <code>Secret Access Key</code>. Make sure you save it locally in notepad or somewhere safe as we will need it to ssh to the instance</li>
</ul>

<h4 id="step-5-%3A-setting-up-local-system-for-secure-shellssh-connection-%3A">Step 5 : Setting up local system for Secure Shell(SSH) connection :</h4>

<p>Locally you need to have AWS CLI installed. If you do not have it, make sure you install it. <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-install.html">Click Here</a> to folow the steps.</p>

<p>Once install run following on your terminal :</p>

<pre><code class="bash">aws configure
</code></pre>

<p>If you get error like <code>aws command not found</code> find where the aws service is installed on your computer by doing <code>which aws</code>. Sometimes you need to add full path like <code>/usr/local/bin/aws configure</code></p>

<p>It will ask you details like below :</p>

<pre><code class="bash">AWS Access Key ID : ********************
AWS Secret Access Key : ****************************
Default region name [None]: us-west-1
Default output format [None]:
</code></pre>

<p>Make sure you add the access key and secret access key we got from earlier step and specify the region in which your EC2 instance resides.</p>

<p>Now, you need to also install <code>EC2 Instance Connect</code> on your local system as it is used to ssh to the instance. Use following command to do the same :</p>

<pre><code class="bash">sudo pip install ec2instanceconnectcli
</code></pre>

<p>And done! Your local system is ready to SSH connect!</p>

<h4 id="step-5-%3A-connect-to-the-instance-via-secure-shellssh-%3A">Step 5 : Connect to the instance via Secure Shell(SSH) :</h4>

<p>After all above steps are done, we can now SSH to our instance. To ssh we will use <code>mssh</code> command which ships with EC2 instance connect service.</p>

<pre><code class="bash">mssh ubuntu@i-xxxxxxxxxxxxxxx
</code></pre>

<p>Where <code>i-xxxxxxxxxxxxxxx</code> is the instance id of our test instance we spun up in step 1. You would be able to SSH to the instance if you have followed above steps correctly.</p>

<h4 id="real-world-use-cases-for-ssh-users-%3A">Real world use cases for SSH users :</h4>

<p>In above setup, we used <code>ubuntu</code> user to SSH connect. However, in real world we can divide our organizational users who need access into groups based on access they need. For example :</p>

<ul>
<li>You can create a user named <code>administrator</code> on your EC2 instance and then use that as <code>ec2:osuser</code> in our policy for system administrators.</li>
<li>You can create a user named <code>developer</code> on your EC2 instance and then use that as <code>ec2:osuser</code> in our policy for application team which might have access to just the application codebase.</li>
</ul>

<p>Please note that what access and permission the connected user must have is in your hands. The responsibility of EC2 instance connect is just to allow the IAM user to SSH to the instance with allowed SSH user.</p>

<p><a href="https://aws.amazon.com/premiumsupport/knowledge-center/new-user-accounts-linux-instance/">Click Here</a> to know more about quick steps to add new user to the instance.</p>

<h4 id="managing-the-ssh-access-%3A">Managing the ssh access :</h4>

<p>You can create multiple policies based on the resources and os username the IAM user can SSH to. If you want to give a new user ssh access, you can just attach respective policy to the user. Similarly, you can just remove an existing ssh cononect policy to remove the SSH access from an existing user.</p>

<p>This is a HUGEEEE plus point of this service.</p>

<h4 id="accessing-the-connection-logs-%3A">Accessing the connection logs :</h4>

<p>EC2 connect pushes the SSH connection logs to <code>AWS Cloudtrail</code>. To view the logs follow below steps :</p>

<ul>
<li>Login to your AWS Console</li>
<li>Select Clourtrail service and go to the region you have EC2 instance connect resources in</li>
<li>Click on <code>Event History</code> tab on the left menu</li>
<li>Addd <code>Event source</code> as the filter type and enter <code>ec2-instance-connect.amazonaws.com</code> as it's value</li>
</ul>

<p>You would be able to see all the SSH conection logs. Beautiful fact is that, even if you have 10 different IAM users using same SSH user, let's say <code>developer</code>, in the logs, you would be able to differentiate which user connected to SSH via <code>developer</code> connection user.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[A complete setup guide for OpenVPN on AWS with free CertBot SSL]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/10/19/complete-setup-guide-for-openvpn-on-aws-with-certbot-ssl/"/>
            <updated>2019-10-19T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/10/19/complete-setup-guide-for-openvpn-on-aws-with-certbot-ssl/</id>
            <content type="html"><![CDATA[<p>OpenVPN is a commercial VPN solutions service to secure your data communications. You can use this in number of ways like hiding your internet identity, remote access to company, inside IoT security and many more. My most favorite use of OpenVPN is to use it as SSH whitelisting, so you can SSH to your server instances only when you are connected to a certain VPN.</p>

<p>Remember, OpenVPN service is not free, but it's cost is very affordable and reasonable for a personal as well as corporate setup!</p>

<h3 id="overview-of-aws-setup-%3A">Overview of AWS setup :</h3>

<p>When you spin up an EC2 instance on AWS, you can either choose from vanilla instance AMIs like basic centos or ubuntu 16.x etc. OR you can choose from pre-baked marketplace AMIs. Services like OpenVPN use marketplace AMIs to provide their pre-baked instances which are ready to use.</p>

<p>But wait.. It is not that plug and play. Setting up OpenVPN can be tricky specially when you do not know the sequence of steps and some little tricks. But, we have got you covered.</p>

<p>We will be also dealing with the common problem of untrusted SSL certificate error and install a free CertBot SSL to make your OpenVPN server full proof. Let's get started!</p>

<h3 id="step-1---spinning-up-the-ec2-server-%3A">Step 1 - Spinning up the EC2 server :</h3>

<ul>
<li>Login to your AWS Console and go to the region you want yout OpenVPN instance to be in</li>
<li>Select EC2 service and click on <code>Launch</code> to spin up a new instance</li>
<li>The EC2 launch wizard will be shown, where click on <code>AWS Marketplace</code> on left</li>
<li>Now search for <code>openvpn</code> and press <code>enter</code></li>
<li>It will show number of official OpenVPN marketplace AMIs which are different in the number of connected devices. I will strongly recommend if you are doing it for the first time, choose the first one which will give you 2 concurrent devices to start with. You can anytime purchase a new license for extending number of users.</li>
</ul>

<p><img src="/images/openvpn-guide/choose-ami.png" alt="alt text1" /></p>

<ul>
<li>Now click on <code>select</code> when you have choosen your AMI</li>
<li>You will be prompted with OpenVPN service cost for each instance type you spin up. This will be added to your AWS billing. I would always choose <code>t2.micro</code> instance type as OpenVPN server does not need much memory to perform it's operations.</li>
</ul>

<p><img src="/images/openvpn-guide/cost.png" alt="alt text1" /></p>

<ul>
<li>Click on <code>continue</code> and choose instance type as <code>t2.micro</code></li>
<li>Click on <code>Next: Configure Instance Details</code></li>
<li>This is an important step. Make sure you choose your VPC if you have one and choose it's public subnet. If you do not have custom VPC and subnets, leave these settings as is. Make sure that its a public subnet as OpenVPN instance should be in a public subnet so it is accessible via web directly.</li>
<li>Click on <code>Next: Add Storage</code></li>
<li>Here you need to make sure the instance volume is encrypted. Otherwise you will get warning like <code>Volume (/dev/sda1) needs to be encrypted as encryption is enabled by default.</code> Click on <code>Encryption</code> dropdown and choose a KMS key which will encrypt your volume. Also make sure your instance volume type is <code>General Purpoise SSD (gp2)</code>. Sometimes it changes to <code>Magnetic (standard)</code> when you enable volume encryption</li>
<li>Click on <code>Next: Add Tags</code> and add the tags you need for this instance</li>
<li>Click on <code>Next: Configure Security Group</code></li>
<li>You need to select <code>Create a new security group</code>. Add security group name as <code>OpenVPN server SG</code>. Wait.. Hey, AWS already has filled in the group rules for you, thats awesome... isn't it?</li>
</ul>

<p><img src="/images/openvpn-guide/sg.png" alt="alt text1" /></p>

<ul>
<li>Click on <code>Review and Launch</code></li>
<li>Verify the details once in this final summary screen and click on <code>Launch</code></li>
<li>It will ask you to select a <code>key pair</code> create a new one as <code>OpenVPN-key-pair</code> and download it.</li>
<li>Now finally.. Click on <code>Launch Instances</code></li>
</ul>

<p>You are done with launching the instance.. Yassssss!! Above steps will launch your new server.</p>

<h3 id="step-2---assigning-elastic-ip-and-domain-%3A">Step 2 - Assigning elastic IP and domain :</h3>

<p>When your instance is up and running, you will see it's public IP given by AWS automatically. However, once you reboot this instance anytime, this IP will change. We do not want that. So we will associate an elastic IP to this instance so it stays no matter if the instance is stopped or rebooted.</p>

<ul>
<li>Select EC2 service from the same region where you have the OpenVPN instance</li>
<li>Click on <code>Elastic IPs</code></li>
<li>Click on <code>Allocate new address</code> and select <code>Allocate</code></li>
<li>Now you will see a new elasic IP in the list which is not associated with any instance</li>
<li>Select that IP and in the actions dropdown choose <code>Associate Address</code></li>
<li>You will see a new association form, keep resource type as <code>Instance</code> and select your new OpenVPN instance from the instance dropdown</li>
<li>Save the association</li>
<li>Now of you go back to the instance and see it's public IP, you will see the new elastic IP as its public IP.</li>
</ul>

<p>Now, you can associate a domain to this new public IP or you can keep as it is. It depends on your preference but I would recommend having a domain like <code>vpn.yourdomain.com</code> to access this server.</p>

<p>If you choose to have a domain, then this is the time when you need to point the A record of your domain to the new elastic public IP. For the consistency in remaining article, we are going to use <code>vpn.yourdomain.com</code>.</p>

<h3 id="step-3-%3A-initializing-up-the-openvpn-basic-settings-%3A">Step 3 : Initializing up the OpenVPN basic settings :</h3>

<p>Now, you will not be able to access openVPN directly. This is because you are yet to initiate the basic settings. For that, we need to ssh into the server.</p>

<ul>
<li>Use the key pair file <code>OpenVPN-key-pair.pem</code> to ssh into the instance. As in the security group port <code>22</code> is open for everyone with value <code>0.0.0.0/0</code>, you would be able to SSH to your instance from anywhere. (We will change that after the setup is completed)</li>
<li>Use ssh username as <code>openvpnas</code> as this comes default with the OpenVPN marketplace AMI</li>
<li>Once you login to the instance, you will see a setup wizard and it will ask you to agree to the terms and conditions</li>
<li>Now it will ask number of settings to you :</li>
</ul>

<pre><code class="bash">openvpnas@openvpnas2:# 

Welcome to OpenVPN Access Server Appliance 2.7.5

  System information as of Sat Oct 19 12:24:42 UTC 2019

  System load:  0.95              Processes:           98
  Usage of /:   26.7% of 7.69GB   Users logged in:     0
  Memory usage: 18%               IP address for eth0: 172.32.1.87
  Swap usage:   0%


          OpenVPN Access Server
          Initial Configuration Tool
------------------------------------------------------
OpenVPN Access Server End User License Agreement (OpenVPN-AS EULA)

    1. Copyright Notice: OpenVPN Access Server License;
       Copyright (c) 2009-2019 OpenVPN Inc. All rights reserved.
       "OpenVPN" is a trademark of OpenVPN Inc.
    2. Redistribution of OpenVPN Access Server binary forms and related documents,
       are permitted provided that redistributions of OpenVPN Access Server binary
       forms and related documents reproduce the above copyright notice as well as
       a complete copy of this EULA.
    3. You agree not to reverse engineer, decompile, disassemble, modify,
       translate, make any attempt to discover the source code of this software,
       or create derivative works from this software.
    4. The OpenVPN Access Server is bundled with other open source software
       components, some of which fall under different licenses. By using OpenVPN
       or any of the bundled components, you agree to be bound by the conditions
       of the license for each respective component. For more information, you can
       find our complete EULA (End-User License Agreement) on our website
       (http://openvpn.net), and a copy of the EULA is also distributed with the
       Access Server in the file /usr/local/openvpn_as/license.txt.
    5. This software is provided "as is" and any expressed or implied warranties,
       including, but not limited to, the implied warranties of merchantability
       and fitness for a particular purpose are disclaimed. In no event shall
       OpenVPN Inc. be liable for any direct, indirect, incidental,
       special, exemplary, or consequential damages (including, but not limited
       to, procurement of substitute goods or services; loss of use, data, or
       profits; or business interruption) however caused and on any theory of
       liability, whether in contract, strict liability, or tort (including
       negligence or otherwise) arising in any way out of the use of this
       software, even if advised of the possibility of such damage.
    6. OpenVPN Inc. is the sole distributor of OpenVPN Access Server
       licenses. This agreement and licenses granted by it may not be assigned,
       sublicensed, or otherwise transferred by licensee without prior written
       consent of OpenVPN Inc. Any licenses violating this provision
       will be subject to revocation and deactivation, and will not be eligible
       for refunds.
    7. A purchased license entitles you to use this software for the duration of
       time denoted on your license key on any one (1) particular device, up to
       the concurrent user limit specified by your license. Multiple license keys
       may be activated to achieve a desired concurrency limit on this given
       device. Unless otherwise prearranged with OpenVPN Inc.,
       concurrency counts on license keys are not to be divided for use amongst
       multiple devices. Upon activation of the first purchased license key in
       this software, you agree to forego any free licenses or keys that were
       given to you for demonstration purposes, and as such, the free licenses
       will not appear after the activation of a purchased key. You are
       responsible for the timely activation of these licenses on your desired
       server of choice. Refunds on purchased license keys are only possible
       within 30 days of purchase of license key, and then only if the license key
       has not already been activated on a system. To request a refund, contact us
       through our support ticket system using the account you have used to
       purchase the license key. Exceptions to this policy may be given for
       machines under failover mode, and when the feature is used as directed in
       the OpenVPN Access Server user manual. In these circumstances, a user is
       granted one (1) license key (per original license key) for use solely on
       failover purposes free of charge. Other failover and/or load balancing use
       cases will not be eligible for this exception, and a separate license key
       would have to be acquired to satisfy the licensing requirements. To request
       a license exception, please file a support ticket in the OpenVPN Access
       Server ticketing system. A staff member will be responsible for determining
       exception eligibility, and we reserve the right to decline any requests not
       meeting our eligibility criteria, or requests which we believe may be
       fraudulent in nature.
    8. Activating a license key ties it to the specific hardware/software
       combination that it was activated on, and activated license keys are
       nontransferable. Substantial software and/or hardware changes may
       invalidate an activated license. In case of substantial software and/or
       hardware changes, caused by for example, but not limited to failure and
       subsequent repair or alterations of (virtualized) hardware/software, our
       software product will automatically attempt to contact our online licensing
       systems to renegotiate the licensing state. On any given license key, you
       are limited to three (3) automatic renegotiations within the license key
       lifetime. After these renegotiations are exhausted, the license key is
       considered invalid, and the activation state will be locked to the last
       valid system configuration it was activated on. OpenVPN Inc.reserves the
       right to grant exceptions to this policy for license holders under
       extenuating circumstances, and such exceptions can be requested through a
       ticket via the OpenVPN Access Server ticketing system.
    9. Once an activated license key expires or becomes invalid, the concurrency
       limit on our software product will decrease by the amount of concurrent
       connections previously granted by the license key. If all of your purchased
       license key(s) have expired, the product will revert to demonstration mode,
       which allows a maximum of two (2) concurrent users to be connected to your
       server. Prior to your license expiration date(s), OpenVPN Inc. will attempt
       to remind you to renew your license(s) by sending periodic email messages
       to the licensee email address on record. You are solely responsible for
       the timely renewal of your license key(s) prior to their expiration if
       continued operation is expected after the license expiration date(s).
       OpenVPN Inc. will not be responsible for any misdirected and/or undeliverable
       email messages, nor does it have an obligation to contact you regarding
       your expiring license keys.
   10. Any valid license key holder is entitled to use our ticketing system for
       support questions or issues specifically related to the OpenVPN Access
       Server product. To file a ticket, go to our website at http://openvpn.net/
       and sign in using the account that was registered and used to purchase the
       license key(s). You can then access the support ticket system through our
       website and submit a support ticket. Tickets filed in the ticketing system
       are answered on a best-effort basis. OpenVPN Inc. staff
       reserve the right to limit responses to users of our demo / expired
       licenses, as well as requests that substantively deviate from the OpenVPN
       Access Server product line. Tickets related to the open source version of
       OpenVPN will not be handled here.
   11. Purchasing a license key does not entitle you to any special rights or
       privileges, except the ones explicitly outlined in this user agreement.
       Unless otherwise arranged prior to your purchase with OpenVPN,
       Inc., software maintenance costs and terms are subject to change after your
       initial purchase without notice. In case of price decreases or special
       promotions, OpenVPN Inc. will not retrospectively apply
       credits or price adjustments toward any licenses that have already been
       issued. Furthermore, no discounts will be given for license maintenance
       renewals unless this is specified in your contract with OpenVPN Inc.

Please enter 'yes' to indicate your agreement [no]: yes

Once you provide a few initial configuration settings,
OpenVPN Access Server can be configured by accessing
its Admin Web UI using your Web browser.

Will this be the primary Access Server node?
(enter 'no' to configure as a backup or standby node)
&gt; Press ENTER for default [yes]: yes

Please specify the network interface and IP address to be
used by the Admin Web UI:
(1) all interfaces: 0.0.0.0
(2) eth0: 172.31.16.206
Please enter the option number from the list above (1-2).
&gt; Press Enter for default [2]: 1

Please specify the port number for the Admin Web UI.
&gt; Press ENTER for default [943]: 943

Please specify the TCP port number for the OpenVPN Daemon
&gt; Press ENTER for default [443]: 443

Should client traffic be routed by default through the VPN?
&gt; Press ENTER for default [yes]: yes

Should client DNS traffic be routed by default through the VPN?
&gt; Press ENTER for default [yes]: yes

Use local authentication via internal DB?
&gt; Press ENTER for default [yes]: yes

Private subnets detected: ['172.31.0.0/16']

Should private subnets be accessible to clients by default?
&gt; Press ENTER for EC2 default [yes]: yes

To initially login to the Admin Web UI, you must use a
username and password that successfully authenticates you
with the host UNIX system (you can later modify the settings
so that RADIUS or LDAP is used for authentication instead).

You can login to the Admin Web UI as "openvpn" or specify
a different user account to use for this purpose.

Do you wish to login to the Admin UI as "openvpn"?
&gt; Press ENTER for default [yes]: yes

&gt; Please specify your OpenVPN-AS license key (or leave blank to specify later):

Initializing OpenVPN...
Adding new user login...
useradd -s /sbin/nologin "openvpn"
Writing as configuration file...
Perform sa init...
Wiping any previous userdb...
Creating default profile...
Modifying default profile...
Adding new user to userdb...
Modifying new user as superuser in userdb...
Getting hostname...
Hostname: openvpnserver
Preparing web certificates...
Getting web user account...
Adding web group account...
Adding web group...
Adjusting license directory ownership...
Initializing confdb...
Generating init scripts...
Generating PAM config...
Generating init scripts auto command...
Starting openvpnas...

NOTE: Your system clock must be correct for OpenVPN Access Server
to perform correctly.  Please ensure that your time and date
are correct on this system.

Initial Configuration Complete!

You can now continue configuring OpenVPN Access Server by
directing your Web browser to this URL:

https://x.x.x.x:943/admin
Login as "openvpn" with the same password used to authenticate
to this UNIX host.

During normal operation, OpenVPN AS can be accessed via these URLs:
Admin  UI: https://x.x.x.x:943/admin
Client UI: https://x.x.x.x:943/

See the Release Notes for this release at:
   https://openvpn.net/vpn-server-resources/release-notes/
</code></pre>

<ul>
<li>Now you we need a password to login first time as an admin. For that run command</li>
</ul>

<pre><code>openvpnas@openvpnas2:~$ sudo passwd openvpn
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
openvpnas@openvpnas2:~$
</code></pre>

<p>You are done with basic setup, we can now proceed with the web UI for further settings.</p>

<h3 id="step-4-%3A-accessing-openvpn-web-ui-%3A">Step 4 : Accessing OpenVPN Web UI :</h3>

<p>Now we will access the OpenVPN Web UI using the elastic IP with url https://x.x.x.x:943/admin where <code>x.x.x.x</code> is your elasic IP. You might be thinking that we have <code>vpn.yourdomain.com</code> setup so why are we using the elastic IP? We will get back to it shortly but for the first time we will need to use the IP.</p>

<ul>
<li>Visit https://x.x.x.x:943/admin which will say that it is insecure, click on advanced and proceed to visit the website</li>
</ul>

<p><img src="/images/openvpn-guide/admin-login.png" alt="alt text1" /></p>

<ul>
<li>Login with the username <code>openvpn</code> and the admin password you set earlier</li>
<li>Once you login for the first time, you will see a lisence agreement which you select <code>agree</code></li>
</ul>

<p><img src="/images/openvpn-guide/agree.png" alt="alt text1" /></p>

<ul>
<li>Now you will see a nice web UI as below :</li>
</ul>

<p><img src="/images/openvpn-guide/dashboard.png" alt="alt text1" /></p>

<ul>
<li>Go to <code>Configuration &gt; Network Settings</code> on the left hand side menu</li>
<li>You will see a setting <code>Hostname or IP Address</code>. Here we will now enter <code>vpn.yourdomain.com</code></li>
<li>Now click on <code>Save Settings</code></li>
<li>Now click on <code>Update running server</code></li>
</ul>

<p>Now we have the domain set up. You can open another tab and visit <code>https://vpn.yourdomain.com:943/admin</code> and it will work now!</p>

<h3 id="step-5-%3A-having-a-valid-ssl-%3A">Step 5 : Having a valid SSL :</h3>

<p>You must have observed that the SSL comes with the OpenVPN server is not trusted by browsers. So we will have a new CertBot SSL which will not show SSL warnings and errors.</p>

<ul>
<li>SSH to the openvpn server again</li>
<li>Type following commands to install certbot</li>
</ul>

<pre><code class="bash">sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install -y certbot
</code></pre>

<p>Now we need to open port 80 <code>temporarily</code> on the security group of our OpenVPN server so that Certbot can verify that the server and domain. Certbot will temporarily spin up a webserver on our openVPN machine for the same.
- Go to AWS console and choose our OpenVPN server security group <code>OpenVPN server SG</code>
- In the inbound rules, add HTTP 80 rule with source <code>0.0.0.0/0, ::/0</code> to access tempoarary port 80 traffic</p>

<p>Now we can run Certbot</p>

<ul>
<li>SSH to the openvpn server again</li>
<li>Type following commands to request certbot certificate</li>
</ul>

<pre><code class="bash">sudo certbot certonly --standalone
</code></pre>

<p>It will ask you number of questions and then a domain name. Enter <code>vpn.yourdomain.com</code> and it will verify it using temporary web server on port 80.</p>

<p>Below is the output :</p>

<pre><code>openvpnas@openvpnas2:~$ sudo certbot certonly --standalone
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator standalone, Installer None
Enter email address (used for urgent renewal and security notices) (Enter 'c' to
cancel): support@yourdomain.com

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please read the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must
agree in order to register with the ACME server at
https://acme-v02.api.letsencrypt.org/directory
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(A)gree/(C)ancel: A

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let's Encrypt project and the non-profit
organization that develops Certbot? We'd like to send you email about our work
encrypting the web, EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: N
Please enter in your domain name(s) (comma and/or space separated)  (Enter 'c'
to cancel): vpn.yourdoman.com
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for vpn.yourdoman.com
Waiting for verification...
Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/vpn.youdomain.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/vpn.youdomain.com/privkey.pem
   Your cert will expire on 2020-01-14. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   "certbot renew"
 - If you like Certbot, please consider supporting our work by:
</code></pre>

<p>Now we are concerned with 2 files : <code>privkey.pem</code> and <code>fullchain.pem</code>. But first, go back to the security group and remove the rule for <code>HTTP port 80</code> as we do not need it anymore!</p>

<p>Now we will view contents of these files and copy them locally. You can use following commands to show their text content, you need to manually copy them and make new files locally with same name and paste the respective contents.</p>

<pre><code class="bash"># Make sure you replace vpn.youdomain.com with your expected domain or ip
cat /etc/letsencrypt/live/vpn.youdomain.com/fullchain.pem
cat /etc/letsencrypt/live/vpn.youdomain.com/privkey.pem
</code></pre>

<p>Final step is to update these certificates on OpenVPN web UI. 
- Visit <code>https://vpn.yourdomain.com:943/admin</code> and login with the admin credentials used earlier
- Go to <code>Configuration &gt; Web Server</code> on the left hand side menu
- You will 3 file upload options fot uploading certifiates
- Upload local <code>fullchain.pem</code> for <code>Certificate</code> file upload
- Upload local <code>privkey.pem</code> for <code>Private Key</code> file upload
- Click on <code>Validate</code> and you will see new certificate results under <code>Validation Results</code>
- Now click on <code>Save</code>
- Click on <code>Update running server</code> if it pops up</p>

<p>And now you are done! Logout and login again or a new tab and you will see that new SSL works with no certificate warnings.</p>

<h3 id="step-6-%3A-creating-an-openvpn-user-%3A">Step 6 : Creating an OpenVPN user :</h3>

<p>You should never ever use the admin user <code>openvpn</code> to connect via vpn client! We will now create a new user.</p>

<ul>
<li>Visit <code>https://vpn.yourdomain.com:943/admin</code> and login with the admin credentials used earlier</li>
<li>Go to <code>User Management &gt; User Permissions</code> on the left hand side menu</li>
<li>Enter new username <code>vpnclientuser</code> and click on <code>More Settings</code> Dropdown to set a new passsword</li>
<li>Click on <code>Save Settings</code> and <code>Update existing server</code></li>
</ul>

<h3 id="final-step-%3A-login-with-vpn-%3A">Final step : Login with VPN :</h3>

<p>Go to your VPN client and enter host as <code>vpn.yourdomain.com</code> with username as <code>vpnclientuser</code> and the password you set for it. And Done!! You are connected.</p>

<p>If you do not have VPN client follow below steps :</p>

<ul>
<li>Visit <code>https://vpn.yourdomain.com:943</code> (Note that this url is not the admin login but a user login without /admin at the end)</li>
<li>Login with the user credentials with username as <code>vpnclientuser</code> and the password you set for it</li>
<li>Now you will see options to download VPN client or reset the user password if needed</li>
</ul>

<h3 id="cleanup-%3A">Cleanup :</h3>

<p>Now you are done with the OpenVPN server setup. I would recommend to remove the HTTP 22 inbound rule from <code>OpenVPN server SG</code> security group associated with the VPN server. This is because you would only need SSH access when you want to check logs or update some setup on OpenVPN. You can always go to AWS and open the port when needed.</p>

<p>Alternatively, change the source to your specific IP from which you SSH to the instance so that it is not open to the whole wide internet.</p>
]]></content>
        </entry>
    </feed>