<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/tags/querybuilder.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2019-09-09T06:53:17+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Laravel finally has higher level orWhere for query scopes]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/"/>
            <updated>2019-03-17T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/</id>
            <content type="html"><![CDATA[<p>Laravel's excellent querybuilder and Eloquent ORM is handy as ever. But with newer version of laravel, it's much more simpler. 5.8 is here already and this feature has not been talked as much because it seems a minor feature release. Let's dive in with an example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Role;

class User extends Authenticatable
{
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [

        'password', 'remember_token',
    ];

    /*
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];

    /**
     * Scope a query to only filter admin users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeAdmin($query)
    {
        return $query-&gt;where('role', Role::Admin);
    }

    /**
     * Scope a query to only filter reviewer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeReviewer($query)
    {
        return $query-&gt;where('role', Role::Reviewer);
    }

    /**
     * Scope a query to only filter customer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeCustomer($query)
    {
        return $query-&gt;where('role', Role::Customer);
    }
}
</code></pre>

<p>The use case is, we want to get the users who are either has <code>admin</code> or <code>reviewer</code> role.</p>

<p>For earlier versions of laravel(version &lt; 5.8), we would do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere(function (Builder $query) {
    $query-&gt;reviewer();
})-&gt;get();
</code></pre>

<p>There is nothing difficult in above eloquent query but having a closure just to filter a scope for an orWhere clause seems too much sometimes. But that case is no more valid after 5.8 releases. Now we can do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere-&gt;reviewer()-&gt;get();
</code></pre>

<p>And that's it. It's a very small change but makes the code much more simpler to implement and read. Sometimes you might get lost in the closures when the query is large. Features like this makes it much more comfortable to implement.</p>
]]></content>
        </entry>
    </feed>