<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/tags/eloquent.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2019-10-21T21:20:45+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Laravel finally has higher level orWhere for query scopes]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/"/>
            <updated>2019-03-17T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/</id>
            <content type="html"><![CDATA[<p>Laravel's excellent querybuilder and Eloquent ORM is handy as ever. But with newer version of laravel, it's much more simpler. 5.8 is here already and this feature has not been talked as much because it seems a minor feature release. Let's dive in with an example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Role;

class User extends Authenticatable
{
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [

        'password', 'remember_token',
    ];

    /*
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];

    /**
     * Scope a query to only filter admin users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeAdmin($query)
    {
        return $query-&gt;where('role', Role::Admin);
    }

    /**
     * Scope a query to only filter reviewer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeReviewer($query)
    {
        return $query-&gt;where('role', Role::Reviewer);
    }

    /**
     * Scope a query to only filter customer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeCustomer($query)
    {
        return $query-&gt;where('role', Role::Customer);
    }
}
</code></pre>

<p>The use case is, we want to get the users who are either has <code>admin</code> or <code>reviewer</code> role.</p>

<p>For earlier versions of laravel(version &lt; 5.8), we would do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere(function (Builder $query) {
    $query-&gt;reviewer();
})-&gt;get();
</code></pre>

<p>There is nothing difficult in above eloquent query but having a closure just to filter a scope for an orWhere clause seems too much sometimes. But that case is no more valid after 5.8 releases. Now we can do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere-&gt;reviewer()-&gt;get();
</code></pre>

<p>And that's it. It's a very small change but makes the code much more simpler to implement and read. Sometimes you might get lost in the closures when the query is large. Features like this makes it much more comfortable to implement.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel has one through]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/"/>
            <updated>2019-03-13T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/</id>
            <content type="html"><![CDATA[<p>Laravel 5.8 is now released and one thing from the release notes many people might be waiting for is the <code>hasOneThrough</code> relationship. Laravel ealier had <code>hasManyThrough</code>, but with the addition of <code>hasOneThrough</code> it's more flexible. Let's dive into an example :</p>

<p>Consider we have <code>User</code> Model, <code>Reviewer</code> Model and <code>Activity</code> Model with structure :</p>

<pre><code>users
    id - integer
    reviewer_id - integer

reviewers
    id - integer

activities
    id - integer
    user_id - integer
</code></pre>

<p>Each <code>reviewer</code> has one <code>user</code>, and each <code>user</code> is associated with one user <code>activity</code> record. If we want to get <code>activity</code> from <code>reviewer</code>, there is no <code>reviewer_id</code> column in <code>activities</code> table, in such case we can use <code>hasOneThrough</code> relation. Let's define the relationship now :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough('App\Activity', 'App\User');
    }
}
</code></pre>

<p>To understand more, lets use Laravel conventional terms on the models. In this case the <code>Activity</code> is the final model we would need to relate, while <code>User</code> is the intermediate model.</p>

<p>As all other relationships in Laravel, we can also explicitely specify the foreign keys while definining <code>hasOneThrough</code> relation, Let's do that for this example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough(
            'App\Activity',
            'App\User',
            'reviewer_id', // Foreign key on users table...
            'user_id', // Foreign key on activities table...
            'id', // Local key on reviewers table...
            'id' // Local key on users table...
        );
    }
}
</code></pre>

<p>Now you can easily do :</p>

<pre><code class="php">$reviewer = Reviewer::first();
$activity = $reviewer-&gt;activity;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel liming chunk collection]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/02/12/laravel-limiting-chunk-collection/"/>
            <updated>2019-02-12T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/02/12/laravel-limiting-chunk-collection/</id>
            <content type="html"><![CDATA[<ul>
<li>Little Intro about <code>chunk</code> :</li>
</ul>

<p>Laravel comes up with an excellent Eloquent ORM. There are lot of cool things in Eloquent, one of which is <code>chunk</code> method.</p>

<p>Usually when you need to process large data, lets say you want to update <code>users</code> table and assign a coupon code based on 3rd party APIs.</p>

<p>What you can do is :</p>

<pre><code class="php">User::get()-&gt;each(function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>Doing this is good but if you have thousands of users, loading them all up at once to do the coupon saving process. That's going to take consume a hige memory at a time and maybe the server will be exusted because so much data is stored in memory for processing at a time.</p>

<p>The <code>chunk</code> method helps these kind of implementations. Chunking records means taking a batch of records by a limit, process those, take the next batch processing those and so on... The idea is you are taking a subset of data to process at a time instead of entire data loaded into memory.</p>

<p>The chunk method will retrieve a "chunk" of Eloquent models, feeding them to a given Closure for processing. Using the chunk method will conserve memory when working with large result sets.</p>

<p>Lets do the same but with chunk this time :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::chunk($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>Now, as you can probably guess this will take 50 user records at a time to process, once  those are completed it will take next 50 untill all records are procesed by chunk closure.</p>

<ul>
<li>The main problem <code>Limit</code> with <code>Chunk</code> :</li>
</ul>

<p>Let's apply limit to the above example :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::limit(100)-&gt;chunk($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>If you would think laravel will chunk 50 records in 2 batches are we are limiting the total records to 100, oops not really.</p>

<p>Laravel will do series of queries like below to chunk the records :</p>

<pre><code class="sql">select * from `users` limit 50 offset 0
select * from `users` limit 50 offset 50
select * from `users` limit 50 offset 100
...
</code></pre>

<p>The chunk method <code>ignores</code> any previous eloquent method which applies limit. It can be <code>limit</code> and <code>offset</code> OR <code>take</code> and <code>skip</code>...</p>

<p>This becomes a problem for which lot of people had raised an issue on laravel's github repo. But Laravel's core dev team mentioned this is the expected behaviour and rightfully so.. Chunk itself is using limit to convert entire collection in batches.</p>

<ul>
<li>And.... Here it is.. The Solution you were waiting for :</li>
</ul>

<p>Laravel has a chunk variation called <code>chunkById</code>. Let's use the first example and implement <code>chunkById</code> now :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::chunkById($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>The main and only fundamental difference between <code>chunk</code> and <code>chunkById</code> is how it structures the query.</p>

<pre><code class="sql">select * from `users` where `id` &gt; 0 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 and `id` &gt; 100 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 and `id` &gt; 100 and `id` &gt; 150 order by `id` asc limit 50
...
</code></pre>

<p>If you observer in the queries done by <code>chunkById</code> :</p>

<ol>
<li>It's adding an order by clause to the id column (By the way you can specify the column as 3rd argument to chunkById method if itis not id)</li>
<li>It adds <code>where id &gt; x</code> each time it processes the next batch</li>
<li>There is no <code>offset</code> used and <code>id</code> column is used conceptually as an offset.</li>
</ol>

<p>This gives you an advantage that you can add your offset in the query using <code>id</code> column as a limit just like <code>chunkById</code> is doing internallu.</p>

<p>Let's limit the chunk in our example with 100 records to chunk :</p>

<pre><code class="php">$recodsPerBatch = 50;

$limit = 100;

$maxId = User::orderBy('id', 'asc')-&gt;offset($limit)-&gt;limit(1)-&gt;select('id')-&gt;first()-&gt;id;

User::where('id', '&lt;', $maxId)-&gt;chunkById($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>What we did was, even if we can not use limit directly, we got an id which falls just above the limit we want. Used that to add a where clause of <code>where('id', '&lt;', $maxId)</code>.</p>

<p>This will then chunk the 100 results, with 2 batches of 50 records in each batch. Cool, isn't it!</p>
]]></content>
        </entry>
    </feed>