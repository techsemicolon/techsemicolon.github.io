<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/tags/php.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2019-10-21T21:19:22+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[A complete setup guide for OpenVPN on AWS with free CertBot SSL]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/10/19/complete-setup-guide-for-openvpn-on-aws-with-certbot-ssl/"/>
            <updated>2019-10-19T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/10/19/complete-setup-guide-for-openvpn-on-aws-with-certbot-ssl/</id>
            <content type="html"><![CDATA[<h3 id="about-openvpn-%3A">About OpenVPN :</h3>

<p>OpenVPN is a commercial VPN solutions service to secure your data communications. You can use this in number of ways like hiding your internet identity, remote access to company, inside IoT security and many more. My most favorite use of OpenVPN is to use it as SSH whitelisting, so you can SSH to your server instances only when you are connected to a certain VPN.</p>

<p>Remember, OpenVPN service is not free, but it's cost is very affordable and reasonable for a personal as well as corporate setup!</p>

<h3 id="overview-of-aws-setup-%3A">Overview of AWS setup :</h3>

<p>When you spin up an EC2 instance on AWS, you can either choose from vanilla instance AMIs like basic centos or ubuntu 16.x etc. OR you can choose from pre-baked marketplace AMIs. Services like OpenVPN use marketplace AMIs to provide their pre-baked instances which are ready to use.</p>

<p>But wait.. It is not that plug and play. Setting up OpenVPN can be tricky specially when you do not know the sequence of steps and some little tricks. But, we have got you covered.</p>

<p>We will be also dealing with the common problem of untrusted SSL certificate error and install a free CertBot SSL to make your OpenVPN server full proof. Let's get started!</p>

<h3 id="step-1---spinning-up-the-ec2-server-%3A">Step 1 - Spinning up the EC2 server :</h3>

<ul>
<li>Login to your AWS Console and go to the region you want yout OpenVPN instance to be in</li>
<li>Select EC2 service and click on <code>Launch</code> to spin up a new instance</li>
<li>The EC2 launch wizard will be shown, where click on <code>AWS Marketplace</code> on left</li>
<li>Now search for <code>openvpn</code> and press <code>enter</code></li>
<li>It will show number of official OpenVPN marketplace AMIs which are different in the number of connected devices. I will strongly recommend if you are doing it for the first time, choose the first one which will give you 2 concurrent devices to start with. You can anytime purchase a new license for extending number of users.</li>
</ul>

<p><img src="/images/openvpn-guide/choose-ami.png" alt="alt text1" /></p>

<ul>
<li>Now click on <code>select</code> when you have choosen your AMI</li>
<li>You will be prompted with OpenVPN service cost for each instance type you spin up. This will be added to your AWS billing. I would always choose <code>t2.micro</code> instance type as OpenVPN server does not need much memory to perform it's operations.</li>
</ul>

<p><img src="/images/openvpn-guide/cost.png" alt="alt text1" /></p>

<ul>
<li>Click on <code>continue</code> and choose instance type as <code>t2.micro</code></li>
<li>Click on <code>Next: Configure Instance Details</code></li>
<li>This is an important step. Make sure you choose your VPC if you have one and choose it's public subnet. If you do not have custom VPC and subnets, leave these settings as is. Make sure that its a public subnet as OpenVPN instance should be in a public subnet so it is accessible via web directly.</li>
<li>Click on <code>Next: Add Storage</code></li>
<li>Here you need to make sure the instance volume is encrypted. Otherwise you will get warning like <code>Volume (/dev/sda1) needs to be encrypted as encryption is enabled by default.</code> Click on <code>Encryption</code> dropdown and choose a KMS key which will encrypt your volume. Also make sure your instance volume type is <code>General Purpoise SSD (gp2)</code>. Sometimes it changes to <code>Magnetic (standard)</code> when you enable volume encryption</li>
<li>Click on <code>Next: Add Tags</code> and add the tags you need for this instance</li>
<li>Click on <code>Next: Configure Security Group</code></li>
<li>You need to select <code>Create a new security group</code>. Add security group name as <code>OpenVPN server SG</code>. Wait.. Hey, AWS already has filled in the group rules for you, thats awesome... isn't it?</li>
</ul>

<p><img src="/images/openvpn-guide/sg.png" alt="alt text1" /></p>

<ul>
<li>Click on <code>Review and Launch</code></li>
<li>Verify the details once in this final summary screen and click on <code>Launch</code></li>
<li>It will ask you to select a <code>key pair</code> create a new one as <code>OpenVPN-key-pair</code> and download it.</li>
<li>Now finally.. Click on <code>Launch Instances</code></li>
</ul>

<p>You are done with launching the instance.. Yassssss!! Above steps will launch your new server.</p>

<h3 id="step-2---assigning-elastic-ip-and-domain-%3A">Step 2 - Assigning elastic IP and domain :</h3>

<p>When your instance is up and running, you will see it's public IP given by AWS automatically. However, once you reboot this instance anytime, this IP will change. We do not want that. So we will associate an elastic IP to this instance so it stays no matter if the instance is stopped or rebooted.</p>

<ul>
<li>Select EC2 service from the same region where you have the OpenVPN instance</li>
<li>Click on <code>Elastic IPs</code></li>
<li>Click on <code>Allocate new address</code> and select <code>Allocate</code></li>
<li>Now you will see a new elasic IP in the list which is not associated with any instance</li>
<li>Select that IP and in the actions dropdown choose <code>Associate Address</code></li>
<li>You will see a new association form, keep resource type as <code>Instance</code> and select your new OpenVPN instance from the instance dropdown</li>
<li>Save the association</li>
<li>Now of you go back to the instance and see it's public IP, you will see the new elastic IP as its public IP.</li>
</ul>

<p>Now, you can associate a domain to this new public IP or you can keep as it is. It depends on your preference but I would recommend having a domain like <code>vpn.yourdomain.com</code> to access this server.</p>

<p>If you choose to have a domain, then this is the time when you need to point the A record of your domain to the new elastic public IP. For the consistency in remaining article, we are going to use <code>vpn.yourdomain.com</code>.</p>

<h3 id="step-3-%3A-initializing-up-the-openvpn-basic-settings-%3A">Step 3 : Initializing up the OpenVPN basic settings :</h3>

<p>Now, you will not be able to access openVPN directly. This is because you are yet to initiate the basic settings. For that, we need to ssh into the server.</p>

<ul>
<li>Use the key pair file <code>OpenVPN-key-pair.pem</code> to ssh into the instance. As in the security group port <code>22</code> is open for everyone with value <code>0.0.0.0/0</code>, you would be able to SSH to your instance from anywhere. (We will change that after the setup is completed)</li>
<li>Use ssh username as <code>openvpnas</code> as this comes default with the OpenVPN marketplace AMI</li>
<li>Once you login to the instance, you will see a setup wizard and it will ask you to agree to the terms and conditions</li>
<li>Now it will ask number of settings to you :</li>
</ul>

<pre><code class="bash">openvpnas@openvpnas2:# 

Welcome to OpenVPN Access Server Appliance 2.7.5

  System information as of Sat Oct 19 12:24:42 UTC 2019

  System load:  0.95              Processes:           98
  Usage of /:   26.7% of 7.69GB   Users logged in:     0
  Memory usage: 18%               IP address for eth0: 172.32.1.87
  Swap usage:   0%


          OpenVPN Access Server
          Initial Configuration Tool
------------------------------------------------------
OpenVPN Access Server End User License Agreement (OpenVPN-AS EULA)

    1. Copyright Notice: OpenVPN Access Server License;
       Copyright (c) 2009-2019 OpenVPN Inc. All rights reserved.
       "OpenVPN" is a trademark of OpenVPN Inc.
    2. Redistribution of OpenVPN Access Server binary forms and related documents,
       are permitted provided that redistributions of OpenVPN Access Server binary
       forms and related documents reproduce the above copyright notice as well as
       a complete copy of this EULA.
    3. You agree not to reverse engineer, decompile, disassemble, modify,
       translate, make any attempt to discover the source code of this software,
       or create derivative works from this software.
    4. The OpenVPN Access Server is bundled with other open source software
       components, some of which fall under different licenses. By using OpenVPN
       or any of the bundled components, you agree to be bound by the conditions
       of the license for each respective component. For more information, you can
       find our complete EULA (End-User License Agreement) on our website
       (http://openvpn.net), and a copy of the EULA is also distributed with the
       Access Server in the file /usr/local/openvpn_as/license.txt.
    5. This software is provided "as is" and any expressed or implied warranties,
       including, but not limited to, the implied warranties of merchantability
       and fitness for a particular purpose are disclaimed. In no event shall
       OpenVPN Inc. be liable for any direct, indirect, incidental,
       special, exemplary, or consequential damages (including, but not limited
       to, procurement of substitute goods or services; loss of use, data, or
       profits; or business interruption) however caused and on any theory of
       liability, whether in contract, strict liability, or tort (including
       negligence or otherwise) arising in any way out of the use of this
       software, even if advised of the possibility of such damage.
    6. OpenVPN Inc. is the sole distributor of OpenVPN Access Server
       licenses. This agreement and licenses granted by it may not be assigned,
       sublicensed, or otherwise transferred by licensee without prior written
       consent of OpenVPN Inc. Any licenses violating this provision
       will be subject to revocation and deactivation, and will not be eligible
       for refunds.
    7. A purchased license entitles you to use this software for the duration of
       time denoted on your license key on any one (1) particular device, up to
       the concurrent user limit specified by your license. Multiple license keys
       may be activated to achieve a desired concurrency limit on this given
       device. Unless otherwise prearranged with OpenVPN Inc.,
       concurrency counts on license keys are not to be divided for use amongst
       multiple devices. Upon activation of the first purchased license key in
       this software, you agree to forego any free licenses or keys that were
       given to you for demonstration purposes, and as such, the free licenses
       will not appear after the activation of a purchased key. You are
       responsible for the timely activation of these licenses on your desired
       server of choice. Refunds on purchased license keys are only possible
       within 30 days of purchase of license key, and then only if the license key
       has not already been activated on a system. To request a refund, contact us
       through our support ticket system using the account you have used to
       purchase the license key. Exceptions to this policy may be given for
       machines under failover mode, and when the feature is used as directed in
       the OpenVPN Access Server user manual. In these circumstances, a user is
       granted one (1) license key (per original license key) for use solely on
       failover purposes free of charge. Other failover and/or load balancing use
       cases will not be eligible for this exception, and a separate license key
       would have to be acquired to satisfy the licensing requirements. To request
       a license exception, please file a support ticket in the OpenVPN Access
       Server ticketing system. A staff member will be responsible for determining
       exception eligibility, and we reserve the right to decline any requests not
       meeting our eligibility criteria, or requests which we believe may be
       fraudulent in nature.
    8. Activating a license key ties it to the specific hardware/software
       combination that it was activated on, and activated license keys are
       nontransferable. Substantial software and/or hardware changes may
       invalidate an activated license. In case of substantial software and/or
       hardware changes, caused by for example, but not limited to failure and
       subsequent repair or alterations of (virtualized) hardware/software, our
       software product will automatically attempt to contact our online licensing
       systems to renegotiate the licensing state. On any given license key, you
       are limited to three (3) automatic renegotiations within the license key
       lifetime. After these renegotiations are exhausted, the license key is
       considered invalid, and the activation state will be locked to the last
       valid system configuration it was activated on. OpenVPN Inc.reserves the
       right to grant exceptions to this policy for license holders under
       extenuating circumstances, and such exceptions can be requested through a
       ticket via the OpenVPN Access Server ticketing system.
    9. Once an activated license key expires or becomes invalid, the concurrency
       limit on our software product will decrease by the amount of concurrent
       connections previously granted by the license key. If all of your purchased
       license key(s) have expired, the product will revert to demonstration mode,
       which allows a maximum of two (2) concurrent users to be connected to your
       server. Prior to your license expiration date(s), OpenVPN Inc. will attempt
       to remind you to renew your license(s) by sending periodic email messages
       to the licensee email address on record. You are solely responsible for
       the timely renewal of your license key(s) prior to their expiration if
       continued operation is expected after the license expiration date(s).
       OpenVPN Inc. will not be responsible for any misdirected and/or undeliverable
       email messages, nor does it have an obligation to contact you regarding
       your expiring license keys.
   10. Any valid license key holder is entitled to use our ticketing system for
       support questions or issues specifically related to the OpenVPN Access
       Server product. To file a ticket, go to our website at http://openvpn.net/
       and sign in using the account that was registered and used to purchase the
       license key(s). You can then access the support ticket system through our
       website and submit a support ticket. Tickets filed in the ticketing system
       are answered on a best-effort basis. OpenVPN Inc. staff
       reserve the right to limit responses to users of our demo / expired
       licenses, as well as requests that substantively deviate from the OpenVPN
       Access Server product line. Tickets related to the open source version of
       OpenVPN will not be handled here.
   11. Purchasing a license key does not entitle you to any special rights or
       privileges, except the ones explicitly outlined in this user agreement.
       Unless otherwise arranged prior to your purchase with OpenVPN,
       Inc., software maintenance costs and terms are subject to change after your
       initial purchase without notice. In case of price decreases or special
       promotions, OpenVPN Inc. will not retrospectively apply
       credits or price adjustments toward any licenses that have already been
       issued. Furthermore, no discounts will be given for license maintenance
       renewals unless this is specified in your contract with OpenVPN Inc.

Please enter 'yes' to indicate your agreement [no]: yes

Once you provide a few initial configuration settings,
OpenVPN Access Server can be configured by accessing
its Admin Web UI using your Web browser.

Will this be the primary Access Server node?
(enter 'no' to configure as a backup or standby node)
&gt; Press ENTER for default [yes]: yes

Please specify the network interface and IP address to be
used by the Admin Web UI:
(1) all interfaces: 0.0.0.0
(2) eth0: 172.31.16.206
Please enter the option number from the list above (1-2).
&gt; Press Enter for default [2]: 1

Please specify the port number for the Admin Web UI.
&gt; Press ENTER for default [943]: 943

Please specify the TCP port number for the OpenVPN Daemon
&gt; Press ENTER for default [443]: 443

Should client traffic be routed by default through the VPN?
&gt; Press ENTER for default [yes]: yes

Should client DNS traffic be routed by default through the VPN?
&gt; Press ENTER for default [yes]: yes

Use local authentication via internal DB?
&gt; Press ENTER for default [yes]: yes

Private subnets detected: ['172.31.0.0/16']

Should private subnets be accessible to clients by default?
&gt; Press ENTER for EC2 default [yes]: yes

To initially login to the Admin Web UI, you must use a
username and password that successfully authenticates you
with the host UNIX system (you can later modify the settings
so that RADIUS or LDAP is used for authentication instead).

You can login to the Admin Web UI as "openvpn" or specify
a different user account to use for this purpose.

Do you wish to login to the Admin UI as "openvpn"?
&gt; Press ENTER for default [yes]: yes

&gt; Please specify your OpenVPN-AS license key (or leave blank to specify later):

Initializing OpenVPN...
Adding new user login...
useradd -s /sbin/nologin "openvpn"
Writing as configuration file...
Perform sa init...
Wiping any previous userdb...
Creating default profile...
Modifying default profile...
Adding new user to userdb...
Modifying new user as superuser in userdb...
Getting hostname...
Hostname: openvpnserver
Preparing web certificates...
Getting web user account...
Adding web group account...
Adding web group...
Adjusting license directory ownership...
Initializing confdb...
Generating init scripts...
Generating PAM config...
Generating init scripts auto command...
Starting openvpnas...

NOTE: Your system clock must be correct for OpenVPN Access Server
to perform correctly.  Please ensure that your time and date
are correct on this system.

Initial Configuration Complete!

You can now continue configuring OpenVPN Access Server by
directing your Web browser to this URL:

https://x.x.x.x:943/admin
Login as "openvpn" with the same password used to authenticate
to this UNIX host.

During normal operation, OpenVPN AS can be accessed via these URLs:
Admin  UI: https://x.x.x.x:943/admin
Client UI: https://x.x.x.x:943/

See the Release Notes for this release at:
   https://openvpn.net/vpn-server-resources/release-notes/
</code></pre>

<ul>
<li>Now you we need a password to login first time as an admin. For that run command</li>
</ul>

<pre><code>openvpnas@openvpnas2:~$ sudo passwd openvpn
Enter new UNIX password:
Retype new UNIX password:
passwd: password updated successfully
openvpnas@openvpnas2:~$
</code></pre>

<p>You are done with basic setup, we can now proceed with the web UI for further settings.</p>

<h3 id="step-4-%3A-accessing-openvpn-web-ui-%3A">Step 4 : Accessing OpenVPN Web UI :</h3>

<p>Now we will access the OpenVPN Web UI using the elastic IP with url https://x.x.x.x:943/admin where <code>x.x.x.x</code> is your elasic IP. You might be thinking that we have <code>vpn.yourdomain.com</code> setup so why are we using the elastic IP? We will get back to it shortly but for the first time we will need to use the IP.</p>

<ul>
<li>Visit https://x.x.x.x:943/admin which will say that it is insecure, click on advanced and proceed to visit the website</li>
</ul>

<p><img src="/images/openvpn-guide/admin-login.png" alt="alt text1" /></p>

<ul>
<li>Login with the username <code>openvpn</code> and the admin password you set earlier</li>
<li>Once you login for the first time, you will see a lisence agreement which you select <code>agree</code></li>
</ul>

<p><img src="/images/openvpn-guide/agree.png" alt="alt text1" /></p>

<ul>
<li>Now you will see a nice web UI as below :</li>
</ul>

<p><img src="/images/openvpn-guide/dashboard.png" alt="alt text1" /></p>

<ul>
<li>Go to <code>Configuration &gt; Network Settings</code> on the left hand side menu</li>
<li>You will see a setting <code>Hostname or IP Address</code>. Here we will now enter <code>vpn.yourdomain.com</code></li>
<li>Now click on <code>Save Settings</code></li>
<li>Now click on <code>Update running server</code></li>
</ul>

<p>Now we have the domain set up. You can open another tab and visit <code>https://vpn.yourdomain.com:943/admin</code> and it will work now!</p>

<h3 id="step-5-%3A-having-a-valid-ssl-%3A">Step 5 : Having a valid SSL :</h3>

<p>You must have observed that the SSL comes with the OpenVPN server is not trusted by browsers. So we will have a new CertBot SSL which will not show SSL warnings and errors.</p>

<ul>
<li>SSH to the openvpn server again</li>
<li>Type following commands to install certbot</li>
</ul>

<pre><code class="bash">sudo apt-get update
sudo apt-get install software-properties-common
sudo add-apt-repository universe
sudo add-apt-repository ppa:certbot/certbot
sudo apt-get update
sudo apt-get install -y certbot
</code></pre>

<p>Now we need to open port 80 <code>temporarily</code> on the security group of our OpenVPN server so that Certbot can verify that the server and domain. Certbot will temporarily spin up a webserver on our openVPN machine for the same.
- Go to AWS console and choose our OpenVPN server security group <code>OpenVPN server SG</code>
- In the inbound rules, add HTTP 80 rule with source <code>0.0.0.0/0, ::/0</code> to access tempoarary port 80 traffic</p>

<p>Now we can run Certbot</p>

<ul>
<li>SSH to the openvpn server again</li>
<li>Type following commands to request certbot certificate</li>
</ul>

<pre><code class="bash">sudo certbot certonly --standalone
</code></pre>

<p>It will ask you number of questions and then a domain name. Enter <code>vpn.yourdomain.com</code> and it will verify it using temporary web server on port 80.</p>

<p>Below is the output :</p>

<pre><code>openvpnas@openvpnas2:~$ sudo certbot certonly --standalone
Saving debug log to /var/log/letsencrypt/letsencrypt.log
Plugins selected: Authenticator standalone, Installer None
Enter email address (used for urgent renewal and security notices) (Enter 'c' to
cancel): support@yourdomain.com

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please read the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must
agree in order to register with the ACME server at
https://acme-v02.api.letsencrypt.org/directory
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(A)gree/(C)ancel: A

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let's Encrypt project and the non-profit
organization that develops Certbot? We'd like to send you email about our work
encrypting the web, EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: N
Please enter in your domain name(s) (comma and/or space separated)  (Enter 'c'
to cancel): vpn.yourdoman.com
Obtaining a new certificate
Performing the following challenges:
http-01 challenge for vpn.yourdoman.com
Waiting for verification...
Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/vpn.youdomain.com/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/vpn.youdomain.com/privkey.pem
   Your cert will expire on 2020-01-14. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   "certbot renew"
 - If you like Certbot, please consider supporting our work by:
</code></pre>

<p>Now we are concerned with 2 files : <code>privkey.pem</code> and <code>fullchain.pem</code>. But first, go back to the security group and remove the rule for <code>HTTP port 80</code> as we do not need it anymore!</p>

<p>Now we will view contents of these files and copy them locally. You can use following commands to show their text content, you need to manually copy them and make new files locally with same name and paste the respective contents.</p>

<pre><code class="bash"># Make sure you replace vpn.youdomain.com with your expected domain or ip
cat /etc/letsencrypt/live/vpn.youdomain.com/fullchain.pem
cat /etc/letsencrypt/live/vpn.youdomain.com/privkey.pem
</code></pre>

<p>Final step is to update these certificates on OpenVPN web UI. 
- Visit <code>https://vpn.yourdomain.com:943/admin</code> and login with the admin credentials used earlier
- Go to <code>Configuration &gt; Web Server</code> on the left hand side menu
- You will 3 file upload options fot uploading certifiates
- Upload local <code>fullchain.pem</code> for <code>Certificate</code> file upload
- Upload local <code>privkey.pem</code> for <code>Private Key</code> file upload
- Click on <code>Validate</code> and you will see new certificate results under <code>Validation Results</code>
- Now click on <code>Save</code>
- Click on <code>Update running server</code> if it pops up</p>

<p>And now you are done! Logout and login again or a new tab and you will see that new SSL works with no certificate warnings.</p>

<h3 id="step-6-%3A-creating-an-openvpn-user-%3A">Step 6 : Creating an OpenVPN user :</h3>

<p>You should never ever use the admin user <code>openvpn</code> to connect via vpn client! We will now create a new user.</p>

<ul>
<li>Visit <code>https://vpn.yourdomain.com:943/admin</code> and login with the admin credentials used earlier</li>
<li>Go to <code>User Management &gt; User Permissions</code> on the left hand side menu</li>
<li>Enter new username <code>vpnclientuser</code> and click on <code>More Settings</code> Dropdown to set a new passsword</li>
<li>Click on <code>Save Settings</code> and <code>Update existing server</code></li>
</ul>

<h3 id="final-step-%3A-login-with-vpn-%3A">Final step : Login with VPN :</h3>

<p>Go to your VPN client and enter host as <code>vpn.yourdomain.com</code> with username as <code>vpnclientuser</code> and the password you set for it. And Done!! You are connected.</p>

<p>If you do not have VPN client follow below steps :</p>

<ul>
<li>Visit <code>https://vpn.yourdomain.com:943</code> (Note that this url is not the admin login but a user login without /admin at the end)</li>
<li>Login with the user credentials with username as <code>vpnclientuser</code> and the password you set for it</li>
<li>Now you will see options to download VPN client or reset the user password if needed</li>
</ul>

<h3 id="cleanup-%3A">Cleanup :</h3>

<p>Now you are done with the OpenVPN server setup. I would recommend to remove the HTTP 22 inbound rule from <code>OpenVPN server SG</code> security group associated with the VPN server. This is because you would only need SSH access when you want to check logs or update some setup on OpenVPN. You can always go to AWS and open the port when needed.</p>

<p>Alternatively, change the source to your specific IP from which you SSH to the instance so that it is not open to the whole wide internet.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP OPcache important settings and revalidation simplified]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/10/05/php-fpm-and-opcache-settings-and-invalidation-simplified/"/>
            <updated>2019-10-05T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/10/05/php-fpm-and-opcache-settings-and-invalidation-simplified/</id>
            <content type="html"><![CDATA[<h3 id="about-opcache-%3A">About OPcache :</h3>

<p>PHP as a language is an interpreted. But the interpretation happens from the binaries. These binaries are compiled into intermediate bytecodes. OPcache comes into picture during the compilation phase where it stores the precompiled script's bytecodes into a shared memory. When next time PHP needs to compile the same PHP script, the precompile bytecodes from the shared memory are used.. Therefore removing the requirement for PHP to load and parse scripts on each request. As a result improving overall PHP performance.</p>

<p>The OPcache extension is bundled with PHP 5.5.0 and later versions.</p>

<h3 id="why-it-is-needed-%3A">Why it is needed :</h3>

<p>Okay wait... Let's really get into a very vital need of this OPcache in the ever growing world of PHP frameworks. Any PHP framework has some core package files which we never change. These php package files really let us use the framework capabilities. For example for laravel, we have <code>illuminate</code>'s laraval packages. Now on top of that, we install new PHP packages as and when needed using dependency managers like <code>composer</code>. We hardly change these files unless we update/install/remove a package dependency.</p>

<p>Now, independent of which PHP framework you are using, these core PHP script files which constitute framework more or less are compiled for each request to generate their bytecodes for interpretation. Similarly, the dependency package PHP script are compied as per their need for that particular request.</p>

<p>Why do we really need to compile these core PHP script files which we indeed hardly change?? Isn't that an overly unneccessary overhead for PHP compilation process to compile these hundreds of PHP script files on each request and thenm intrepret them? Doesn't make much sense right? There you go.. OPcache to the rescue...</p>

<h3 id="important-settings-of-opcache-%3A">Important settings of OPcache :</h3>

<p>As OPcache overall sounds really fascinating which internally optimizes the compilation process of PHP scripts, it is equally important to know the important settings. Cache handling, cache clearing and cache storing and overall invalidation depends on these settings.</p>

<ul>
<li>Finding the php.ini to work with : 
You need to find the php.ini which is currently in use. There are different ways to find it. You can find it from terminal using :</li>
</ul>

<pre><code class="bash">php --ini | grep -i loaded
</code></pre>

<p>OR create a temporary script file called 'info.php` and have following content on it :</p>

<pre><code class="php">phpinfo();
</code></pre>

<p>Once you open this file into browser, you would be able to see which php.ini is used.</p>

<p>Mostly if you have php version 7.x with fpm installed then it will be inside <code>/etc/php/7.x/fpm/php.ini</code>. Or if you have 7.x with apache2 installed then it will be inside <code>/etc/php/7.x/apache2/php.ini</code>.</p>

<ul>
<li><p>Enable opcache :</p>

<p>In the loaded and used <code>php.ini</code>, you can enable and disable opcache by updating following directive :</p>

<pre><code>opcache.enable=1 //Enables OPcache
opcache.enable=0 //Disables OPcache
</code></pre>

<p>OPCache also can be enabled for CLI, PHP running from the command line interface(terminal) :</p>

<pre><code>opcache.enable_cli=1 //Enables OPcache
opcache.enable_cli=0 //Disables OPcache
</code></pre></li>
<li><p>OPcache RAM usage :</p>

<p>When the entire cache is stored into shared memory, the default max size of that memory storage is <code>64MB</code> before PHP <code>7.0.0</code> and <code>128MB</code> for after versions. You can update it as per your memory. Ideally 64MB to 128MB size is more than enough for most of the PHP frameworks.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.memory_consumption=128
</code></pre></li>
<li><p>Cached script limit :</p>

<p>By default OPcache can cache <code>2000</code> files before PHP <code>7.0.0</code> and <code>10000</code> for after versions. You can increase this number as per your requirement. For frameworks like PHP Magento you could probably have this value bumped up as the core files are large in number.</p>

<p>First know count of PHP scripting files in your codebase :</p>

<pre><code class="bash"># Make sure you change this path as per your setup
cd  /var/www/html 
# Count number of php files
find . -type f -print | grep php | wc -l
</code></pre>

<p>Now above will givbe you a numeric count of total PHP script files in your codebase. Now you can set OPcache setting accordingly. In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.max_accelerated_files=20000
</code></pre></li>
<li><p>Set automated cache clearing :</p>

<p>When you have new updates in cached PHP script files, OPcache will attempt to clear and then revalidate their cache. This is set using <code>validate_timestamps</code> directive and it happens periodically based on other directive setting <code>revalidate_freq</code>. When this directive is disabled, you MUST reset OPcache manually via opcache_reset(), opcache_invalidate() or by restarting the Web server for changes to the filesystem to take effect.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.validate_timestamps=1 //Enabled
opcache.validate_timestamps=0 //Disabled
</code></pre></li>
<li><p>Revalidation and it's frequency :</p>

<p>OPcache revalidates the opcache afer certain number of seconds to check if your code has changed. <code>0</code> value signifies that it checks your PHP code every single request which is unneccessary.
By default it happens every 2 seconds. If you have PHP files changing hardly on your setup, it makes sence to increase the frequency duration. As revalidation also takes memory, bumping this up might save unneccessary memory revalidation usage.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.revalidate_freq=120
</code></pre>

<p>OR you can totally disable this revalidation by updating following directive :</p>

<pre><code>opcache.validate_timestamps=0 //Disables OPcache revalidation
</code></pre>

<p>In your development or sandbox environment you can set this to 0 so that changes take effect immediately. However, it is as good as disabling which can save lot of syscalls.</p></li>
<li><p>Skipping caching selecively :</p>

<p>If you know that let's say <code>user.php</code> file in your framework changes often and you do not really want to clear cache everytime it changes. You can basically have OPcache ignore the caching of this file. It is called blacklisting file in terms of OPcache. This setting is littlbit different. It takes an absolute path location of a <code>.txt</code> file. In this text file you can specify the files you want to blacklist(skip) for caching.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.blacklist_filename=/etc/php/7.x/fpm/opcache_blacklist.txt
</code></pre>

<p>You can have whatever name you want for this text file. And then inside <code>opcache_blacklist.txt</code> :</p>

<pre><code class="bash">#Specific file inside /var/www/html/
/var/www/html/user.php 

#All files starting with user* inside /var/www/html/
/var/www/html/user

#Wildcare usage inside /var/www/html/
/var/www/*-user.php
</code></pre></li>
<li><p>Increasing request response shutdown :</p>

<p>PHP OPcache uses a mechanism which checks for repetitive occurances of strings and internally stores single value of it with remaining ones having pointer to the same value. The fascinating thing is instead of having a pool of these strings for each and every FPM process, this shares it across all of your FPM processes.</p>

<p>In OPcache settings, you can control how much memory this process can use from directive <code>opcache.interned_strings_buffer</code> Its default value is <code>4</code>(MB) before PHP <code>7.0.0</code> and <code>8</code>(MB) for after versions.</p>

<p>In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.interned_strings_buffer=12
</code></pre></li>
</ul>

<p>Note that to have changes to take effect from php.ini, you need to restart PHP FPM or apache2 depending on your setup.</p>

<h3 id="clearing-the-opcache-%3A">Clearing the OPcache :</h3>

<p>When OPcache is enabled, any changes in cached PHP script files will not take effect until OPcache is cleared or it is revalidated. This is applicable when you release new updates into a OPcache enabled PHP server.</p>

<p>To clear cache there are multiple ways :</p>

<ul>
<li><p>Clearing from browser :</p>

<p>You can have a file <code>opcache_refresh.php</code> with following content :</p>

<pre><code class="php">try{
    opcache_reset();
    echo "OPcache has been cleared successfully!";
}
catch(\Exception $e){
    echo "Oops.. OPcache could not be cleared!";
}
</code></pre>

<p>When you request this file from browser, it will reset(clear) the opcache and any new changes done inside the cached files will start reflecting.</p></li>
<li><p>Clearing from terminal :</p>

<p>If you have nginx with PHP FPM :</p>

<pre><code class="bash">sudo service php7.x-fpm reload
</code></pre>

<p>If you have apache2 :</p>

<pre><code class="bash">sudo service apache2 reload
</code></pre></li>
<li><p>Using cachetool :</p>

<p>This is very useful when you do not want to have an open PHP file to reset opcache and you do not want to reload FPM or apache2 for the same. <a href="http://gordalina.github.io/cachetool/"><code>cachetool</code></a> is a way between the two :</p>

<p>To Install  :</p>

<pre><code class="bash">// Download the phar
curl -sO http://gordalina.github.io/cachetool/downloads/cachetool.phar
// Set permissions
chmod +x cachetool.phar
</code></pre>

<p>Now you can clear opcache using following command :</p>

<pre><code class="bash">// Using an automatically guessed fastcgi server
php cachetool.phar opcache:reset --fcgi

// Using php fpm socket
php cachetool.phar opcache:reset --fcgi=/var/run/php7.x-fpm.sock
</code></pre></li>
</ul>

<h3 id="opcache-and-the-automated-deployments-%3A">OPcache and the automated deployments :</h3>

<p>When you have automated deployments set up on your PHP server, you need to incorporate OPcache clearing so that new changes take effect.</p>

<p>If you do not perform this manually, eventually OPcache will revalidate itself based on your OPcache revalidation settings assuming you have <code>validate_timestamps</code> set to <code>1</code>. But it is pretty handy to do it manually as part of your automated deployment scripts to make sure changes take immediate effect.</p>

<p>From my personal experience, relading FPM or apache2 to clear OPcache is not a good option. Even if it gracefully reloads PHP processes, any request which is(unfortunarely) ongoing on the server gives <code>502 bad gateway</code>. I would rather use the alternative like <code>cachetool</code> mentioned in above section which does not affect any ongoing PHP processes at all.</p>

<p>The sequence when you reload OPcache matters. As soon as git or any of your deployment methods pulls the latest PHP code changes, you should first clear the OPcache. Then you can run all the remaining deployment commands which may use the updated PHP files. This makes sure the deployment commands do not use cached PHP script opcodes even when the sever has pulled the latest changes.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Manage laravel .env file using AWS parameter store]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/07/10/aws-manage-env-file-using-ssm-laravel/"/>
            <updated>2019-07-10T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/07/10/aws-manage-env-file-using-ssm-laravel/</id>
            <content type="html"><![CDATA[<p>When you have an application hosted on AWS EC2 instances which runs on an environment file, like laravel framework needs <code>.env</code> environment file, it is always a pain to manage environment variables.</p>

<p>Specially when you have multiple EC2 instances running for production on an auto-scaling setup. Please note that these are not host OS environment variable, but the application framework's environment variables in the respective env file.</p>

<p>You may alternatively call them application configuration files. You mostly do not add them in git or bitbucket due to the possibility of them containing sensitive information, e.g. database passwords, AWS access credentials etc..</p>

<h3 id="problem-statement-%3A">Problem statement :</h3>

<ul>
<li>You have environment .env file inside your EC2 AMI</li>
<li>When you spin up an instance, the .env file comes from the AMI specified in the launch configuration, considering you have auto-scaling set up</li>
<li>If you want to update any existing .env variable, you need to spin up new AMI and update production servers</li>
</ul>

<p>If your production environment has a setup like above, you may have experienced bit of pain in changing .env variables. Specially when there is a quick turnaround required due to some urgency or bug where you need to update an .env file variable asap.</p>

<h3 id="ec2-user_data-coming-to-rescue-%3A">EC2 user_data coming to rescue :</h3>

<p>When you spin up a new instance, you have an option in <code>Step 3: Configure Instance Details</code> screen inside <code>Advanced Details</code> called <code>user_data</code>. This looks something like below :</p>

<p>You can write shell scripts in text area or upload a bash file as per your choice. When you launch an instance in Amazon EC2, these shell scripts will be run after the instance starts. You can also pass cloud-init directives but we will stick to shell script for this use case to fetch the environment variables from systems manager parameter store and generate an environment file, in our case <code>.env</code> file under laravel root.</p>

<p><img src="/images/aws-ansible/user-data.png" alt="alt text1" /></p>

<h3 id="setting-up-variables-in-parameter-store-%3A">Setting up variables in parameter store :</h3>

<p>AWS has service called <code>Systems Manager</code> which contains a sub-service for resource sharing. This is called <code>Parameter Store</code>. There are couple of ways to store a parameter inside this service. We will be using <code>SecureString</code> option which makes sure the paramater value(which in our case is the enviromnent file contents) are encrypted inside AWS.</p>

<p>You may think that instead of storing entire .env file content into a single text-area, why should we not create multiple paremeters for each variable in the .env file? That's a perfectly valid point. However, storing it in one paramter store decreases overall maintenability and also makes the shell script to retrive those values very compact.</p>

<p>You can use below steps to store your <code>.env</code> file inside parameter store :</p>

<ol>
<li>Login to AWS console and switch to the region which contains your production setup</li>
<li>Go to <code>Systems Manager</code> and click on <code>Parameter Store</code></li>
<li>Click on <code>Create Parameter</code></li>
<li>Add <code>Name</code> and <code>Description</code></li>
<li>Select <code>Tier</code> as <code>Standard</code></li>
<li>Select <code>Type</code> as <code>SecureString</code></li>
<li>Select KMS key which managed encryption as per your choice</li>
<li>Enter entire <code>.env</code> contents into the text-area</li>
<li>Click on <code>Create Parameter</code> to save the parameter</li>
</ol>

<p><img src="/images/aws-ansible/create-parameter.png" alt="alt text1" /></p>

<h3 id="accessing-the-paremeter-store-values-%3A">Accessing the paremeter store values :</h3>

<p>Your EC2 instance which runs the application will be accessing these parameter store values. So you need to make sure your instance IAM role has following  permission in its policy.</p>

<pre><code class="json">{
    "Version": "2012-10-17",
            "Statement": [
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameters",
                "ssm:GetParameter",
            ],
            "Resource": [
                "arn:aws:ssm:*:*:parameter/*"
            ]
        }
    ]
}
</code></pre>

<h3 id="shell-script-to-generate-.env-%3A">Shell script to generate .env :</h3>

<p>We will be using following shell script to generate <code>.env</code> :</p>

<pre><code class="bash">#!/bin/bash

# Please update below varoables as per your production setup
PARAMATER="APP_ENV"
REGION="us-west-1"
WEB_DIR="/var/www/html"
WEB_USER="www-data"

# Get parameters and put it into .env file inside application root
aws ssm get-parameter --with-decryption --name $PARAMATER --region $REGION | jq '.Parameter.Value' &gt; $WEB_DIR/.env

# Clear laravel configuration cache
cd $WEB_DIR
chown $WEB_USER. .env
sudo -u $WEB_USER php artisan config:clear
</code></pre>

<h3 id="putting-pieces-together-%3A">Putting pieces together :</h3>

<p>Let us now consider a very generic overview of how these pieces will fit together :</p>

<ul>
<li>You will have your <code>.env</code> file stored in AWS systems manager parameter store with encryption enabled at rest</li>
<li>When a new instance will spin up, it will pull the env string and put into an <code>.env</code> file. This will happen using <code>user_data</code> setting</li>
<li>It will clear the application env cache or any dependent commands to take new environmental file into effect</li>
</ul>

<h3 id="fundamental-implementation-situations-%3A">Fundamental implementation situations :</h3>

<p>Let's say you have added a new variable in your env paramater group. You expect it to reflect ASAP in following situations :</p>

<ul>
<li><strong>All the new EC2 instances which will spin up after that point should always use the new env file variables</strong> :</li>
</ul>

<p>This can be easily implemented as we discussed earlier using <code>user_data</code>. When you spin up an instance manually you can add the above shell script to pull latest .env from parameter group in the <code>user_data</code> field.</p>

<p>If you have auto-scaling enabled, make sure your launch configuration or launch template has the <code>user_data</code> field set with the shell script we discussed in the previous section. This will then make sure, whenever a new EC2 instance will spin up, it will always fetch the environmental paramater first from AWS systems manager's parameter group store and then make a branch new <code>.env</code> file.</p>

<ul>
<li><strong>The existing instances which are already running should fetch the updated env file variables</strong> :</li>
</ul>

<p>Let's first take out the case where you have instance not in any auto-scaling group. You can then manually SSH into instance and fetch the new .env. (Or automate it using Solution B)</p>

<p>But in here main point of concern is when you have autoscaling setup and production is running on multiple instances. This is an area where we can have 2 solutions. First one is very easy to implement whereas second one can be a pain. Let's discuss both :</p>

<p><code>Solution A</code> :</p>

<p>From your existing auto-scaling instances, start terminating an instance one by one. Your auto-scaling setup will then spin up new instances. As we discussed earlier, considering your launch configuration already has the shell script to pull updated environment variables from parameter group at the instance start from <code>user_data</code> setting, the new instances will be ready with updated environmental veriables in their <code>.env</code> files.</p>

<p>To add more automation, you may also do the termination activity using a lambda function or ansible based on a trigger when systems manager's parameter group is updated.</p>

<p><code>Solution B</code> :</p>

<p>This is important for applications where there ephemeral storage is important for some ongoing tasks. If we terminate the instances, the production application will lose some of it's ongoing process data. In this case we need to find an automated way to run the shell script on all those running instances, to update their <code>.env</code> variables.</p>

<p>In this case, you can use AWS lambda for this purpose. The bottom line of this is <code>When systems manager's parameter group is updated, it will trigger a lambda function. That lambda function will SSH into all your running production instances and update the .env file</code>.</p>

<p>There is already a github repo I have added sometime back on running SSH commands on EC2 instances. You can <a href="https://github.com/techsemicolon/ec2-run-commands-log-output">click here</a> to know more about it.</p>

<h3 id="my-two-cents-%3A">My two cents :</h3>

<p>This may definitely appear as an overhead... But as your application becomes large, setting these things up will make your life so much easier.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel APP_KEY rotation policy for app security]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/06/14/laravel-app-key-rotation-policy-for-security/"/>
            <updated>2019-06-14T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/06/14/laravel-app-key-rotation-policy-for-security/</id>
            <content type="html"><![CDATA[<p>If you have an existing laravel app running or you do fresh laravel installation, you will notice in your app's <code>.env</code> file (in case of new installations it's in <code>.env.example</code> file), there is a key called <code>APP_KEY</code>. It is a  32 characters long string. This is the laravel application key.</p>

<p>Laravel has an artisan command <code>php artisan key:generate</code> which generates a new <code>APP_KEY</code> for you. If you have installed Laravel via Composer or the Laravel installer, this key will be set for you automatically by the <code>key:generate</code> command.</p>

<h4 id="why-your-app-key-is-important%3F">Why your app key is important?</h4>

<p>The <code>APP_KEY</code> is used to keep your user sessions and other encrypted data secure! If the application key is not set, your user sessions and other encrypted data will not be secure. Believe it or not it is a big security risk.</p>

<p>To give you more specific context, earlier laravel had a security issue :</p>

<p><code>If your application's encryption key is in the hands of a malicious party, that party could craft cookie values using the encryption key and exploit vulnerabilities inherent to PHP object serialization / unserialization, such as calling arbitrary class methods within your application.</code></p>

<p>Do not worry, laravel later released a security update which disabled all serialization and unserialization of cookie values using <code>APP_KEY</code>. All Laravel cookies are encrypted and signed, cookie values can be considered safe from client tampering. <a href="https://laravel.com/docs/5.6/upgrade#upgrade-5.6.30"><code>clich here</code></a> to see details about this security update.</p>

<p>Before Update :</p>

<p>If used to serialize all values during encryption.</p>

<pre><code class="php">$encryptedValue = \openssl_encrypt(serialize($value), $this-&gt;cipher, $this-&gt;key, 0, $iv);
</code></pre>

<p>After Update :</p>

<p>It will serialize only if you pass second parameter as <code>true</code> while calling encrypt function.</p>

<pre><code class="php">$encryptedValue = \openssl_encrypt(
    $serialize ? serialize($value) : $value,
    $this-&gt;cipher, $this-&gt;key, 0, $iv
);
</code></pre>

<p>Okay, to sum it up, <code>APP_KEY</code> is important and any backdoor associated with it which leads to compromising app security should be closed.</p>

<h4 id="passwords-and-app_key-%3A">Passwords and APP_KEY :</h4>

<p>When we consider parts of the app which have encryption, first thing comes to mind is the user passwords. Let's take a minute to differentiate both :</p>

<ul>
<li>Encryption :</li>
</ul>

<p>Encryption is when you have a data which you want to safeguard. So you take original data, encrypt it using key and ciphers so it turns into gibrish string. This gribrish string has no meaning and hence it can not be interpreter directly toits original data meaning. When you need, you can decrypt this encrypted value to retrive it in original state.</p>

<p>Laravel has <code>Crypt</code> facade which helps us implement encryption and decryption.</p>

<p>In this case, the <code>key</code> and <code>ciphers</code> are important because those are used in decryption. And should NOT be explosed.</p>

<ul>
<li>Hashing :</li>
</ul>

<p>Hashing in simple terms is one way encryption. Once you encrypt you can NOT decrypt it in original state. You can verify if the hash matches a plain value to check if its the original value or not. But that's all you can do. It is way more secure in terms of sensitive information like user passwords.</p>

<p>Laravel has <code>Hash</code> facade which helps us implement one way hashing encryption.</p>

<p>Now, one of the main thing you should understand : APP_KEY is <code>NOT</code> used in Hashing and it is used in encryption. So your passwords security is NOT dependent on the APP_KEY. Whereas any data of your app which you have encrypted <code>do have</code> dependency on APP_KEY.</p>

<h4 id="affects-of-changing-app_key-%3A">Affects of changing APP_KEY :</h4>

<p>Before we dive into how to change APP_KEY, it is important to know what will happen if we change it. When APP_KEY is changed in an existing app :</p>

<ul>
<li>Existing user sessions will be invalidated. Hence, all your currently active logged in users will be logged out.</li>
<li>Any data in your app which you have encrypted using <code>Crypt</code> facade or <code>encrypt()</code> helper function will no longer be decrypted as the encryption uses APP_KEY.</li>
<li>Any user passwords will NOT be affected so no need to worry about that.</li>
<li>If you have more than one app servers running, all should be replaced with the same APP_KEY.</li>
</ul>

<h4 id="let%27s-handle-the-headache-first-%3A">Let's handle the headache first :</h4>

<p>As seen above, you can imagine most headache in changing APP_KEY is handling the data which is encrypted using old app key. For that you need to first decrypt the data using old APP_KEY and then re-encrypt using new APP_KEY. Damn!</p>

<p>Don't worry! Here is a simple helper function you can use :</p>

<pre><code class="php">/**
 * Function to re-encrypt when APP_KEY is rotated/changed
 * 
 * @param string $oldAppKey
 * @param mixed $value
 */
function reEncrypt($oldAppKey, $value)
{
    // Get cipher of encryption
    $cipher = config('app.cipher');
    // Get newly generated app_key
    $newAppKey = config('app.key');

    // Verify old app Key
    if (Str::startsWith($oldAppKey, 'base64:')) {
        $oldAppKey = base64_decode(substr($oldAppKey, 7));
    }
    // Verify new app Key
    if (Str::startsWith($newAppKey, 'base64:')) {
        $newAppKey = base64_decode(substr($newAppKey, 7));
    }

    // Initialize encryptor instance for old app key
    $oldEncryptor = new Illuminate\Encryption\Encrypter((string)$oldAppKey, $cipher);

    // Initialize encryptor instance for new app key
    $newEncryptor = new Illuminate\Encryption\Encrypter((string)$newAppKey, $cipher);

    // Decrypt the value and re-encrypt
    return $newEncryptor-&gt;encrypt($oldEncryptor-&gt;decrypt($value));
}
</code></pre>

<p>Let's imagine we have a column called <code>bank_account_number</code> in <code>users</code> table which is stored as encrypted string. I have another column called <code>old_bank_account_number</code> in the <code>users</code> table to store old value as a backup before we save newly re-encrypted value. We can create a command <code>php artisan encryption:rotate</code> :</p>

<pre><code class="php">&lt;?php

namespace App\Console\Commands;

use App\User;
use Illuminate\Console\Command;
use Illuminate\Encryption\Encrypter;

class EncryptionRotateCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'encryption:rotate {--oldappkey= : Old app key}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Re-encrypt when APP_KEY is rotated';

    /**
     * Create a new command instance.
     *
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Function to re-encrypt when APP_KEY is rotated/changed
     * 
     * @param string $oldAppKey
     * @param mixed $value
     */
    public function handle()
    {
        // Get the old app key
        $oldAppKey = $this-&gt;option('oldappkey');

        // Get cipher of encryption
        $cipher = config('app.cipher');
        // Get newly generated app_key
        $newAppKey = config('app.key');

        // Verify old app Key
        if (Str::startsWith($oldAppKey, 'base64:')) {
            $oldAppKey = base64_decode(substr($oldAppKey, 7));
        }
        // Verify new app Key
        if (Str::startsWith($newAppKey, 'base64:')) {
            $newAppKey = base64_decode(substr($newAppKey, 7));
        }

        // Initialize encryptor instance for old app key
        $oldEncryptor = new Encrypter((string)$oldAppKey, $cipher);

        // Initialize encryptor instance for new app key
        $newEncryptor = new Encrypter((string)$newAppKey, $cipher);

        User::all()-&gt;each(function($user) use($oldEncryptor, newEncryptor){

            // Stored value in a backup column
            $user-&gt;old_bank_account_number  = $user-&gt;bank_account_number;

            // Decrypt the value and re-encrypt
            $user-&gt;bank_account_number  = $newEncryptor-&gt;encrypt($oldEncryptor-&gt;decrypt($user-&gt;bank_account_number));
            $user-&gt;save();

        });

        $this-&gt;info('Encryption completed with newly rotated key');
    }
}
</code></pre>

<h3 id="update-%3A">Update :</h3>

<p>I have pushed a new package which helps to simplify above implementation. <a href="https://github.com/techsemicolon/laravel-app-key-rotation"><code>click here</code></a> to view the Laravel package.</p>

<h4 id="rotating-the-key-%3A">Rotating the key :</h4>

<p>Finally, lets rotate the key.</p>

<pre><code>- Run `php artisan down` on all instances so that no user can interact until this is done
- Go to terminal on one of the instance and open your `.env` file. 
- Copy the APP_KEY value which is the old(existing) app key
- Run `php artisan key:generate` which will generate a new APP_KEY
- Run the helper command as we created above to re-encrypt the values `php artisan encryption:rotate --oldappkey=your_old_app_key_value`
- Replace the APP_KEY key on all remaining instances
- Run `php artisan config:clear` on all instances
- Run `php artisan cache:clear` on all instances
- Run `php artisan view:clear` on all instances
- Run `php artisan view:clear` on all instances
- Run `php artisan up` on all instances
</code></pre>

<p>And.. It's done! You can do this based on key rotation frequency you are comfortable in. I would recommend at-least once in 3 months.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel use secure SSL connection while using AWS RDS]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/04/10/laravel-rds-ssl-encryption-in-transit/"/>
            <updated>2019-04-10T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/04/10/laravel-rds-ssl-encryption-in-transit/</id>
            <content type="html"><![CDATA[<p>Amazon Relational Database Service Amazon RDS is a cloud based web service that makes things easier to set up, operate, and scale a relational databases on the cloud. It has become one of the popular choices when setting up laravel database infrastructure.</p>

<ul>
<li>Quick question :</li>
</ul>

<p>If you are using AWS RDS in your laravel application, is your connection encrypted in transit? Or so ask other way around, is your laravel application connecting to AWS RDS using a secure SSL connection?</p>

<p>If you think that RDS comes up with secure encryption in transit, you are right, it implements SSL. However, is it turned on somehow by default or is it there when we use it directly? Not really.. I had a perception that my laravel app is secured in transit by SSL encryption until I found out its not.</p>

<ul>
<li>Let's find out :</li>
</ul>

<p>Connect to the environment/server/container where laravel is hosted and run tinker :</p>

<pre><code class="bash">php artisan tinker
</code></pre>

<p>Once, the tinker prompt is open, run following :</p>

<pre><code class="bash">&gt;&gt;&gt; DB::select("SHOW STATUS LIKE 'Ssl_cipher'")
</code></pre>

<p>If it gives output like following :</p>

<pre><code class="bash">=&gt; [
    {
        +"Variable_name": "Ssl_cipher",
        +"Value": "DHE-RSA-AES128-SHA",
    },
]
</code></pre>

<p>Then laravel application is connecting to AWS RDS via a secure SSL connection.</p>

<p>However, if the output is like this  :</p>

<pre><code class="bash">=&gt; [
    {
        +"Variable_name": "Ssl_cipher",
        +"Value": "",
    },
]
</code></pre>

<p>Then the connection is not sure. There are number of variables which you can help us get more information about the SSL connection paramaters. We checked <code>Ssl_cipher</code> above, you can also check <code>Ssl_version</code> which might give you blank or something like <code>TLSv1</code> if SSL is working.</p>

<p>To get all information about SSL connection run following in tinker prompt :</p>

<pre><code class="bash">&gt;&gt;&gt; DB::select("SHOW STATUS LIKE '%Ssl%'")
</code></pre>

<ul>
<li>Next steps to secure the connection :</li>
</ul>

<p>If you found out that the laravel application connection is not using SSL while connecting to AWS RDS, you can follow below steps to enable the same.</p>

<p>Firstly, let us understand how it works. When you connect to AWS RDS normally via mysql cli, you do :</p>

<pre><code class="bash">mysql -h myinstance.c9akciq32.rds-us-east-1.amazonaws.com -u username -p
</code></pre>

<p>You can pass SSL certificate using <code>--ssl-ca</code> option in above command like below :</p>

<pre><code class="bash">mysql -h myinstance.c9akciq32.rds-us-east-1.amazonaws.com --ssl-ca=/path/to/certificate-authority-file.pem -u username -p
</code></pre>

<p>Optionally, you can pass <code>-ssl-mode</code> and <code>--ssl-verify-server-cert</code>. For more details about this please refer mysql's official <a href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-options.html">documentation</a>.</p>

<p>Now let's get back to the original problem which we are here to solve. How we are going to do this in Laravel?</p>

<p>Step 1 : Downloading the <code>certificate authority file</code>. AWS RDS has a commonly published pem file called <code>rds-combined-ca-bundle.pem</code> which you can download directly from <a href="https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem">here</a>. It is an officially published pem file which will work in all default RDS SSL connections.</p>

<p>Step 2 : Save the downloaded file from step 1 inside a new directory called <code>RDSCerts</code> inside laravel root. Quick note that in this step itself, I would add this inside gitignore because there is no need to add pem and cert files inside the version control.</p>

<p>Step 3 : Laravel's database configurations are inside <code>config/database.php</code> file. It already has a <code>mysql</code> section. Let's not change that, lets copy that entirely into a new configuration section called <code>mysql_ssl</code> where we will also add the certification authority file in options like below :</p>

<pre><code class="php">'mysql_ssl' =&gt; [
    'driver' =&gt; 'mysql',
    'host' =&gt; env('DB_HOST', '127.0.0.1'),
    'port' =&gt; env('DB_PORT', '3306'),
    'database' =&gt; env('DB_DATABASE', 'forge'),
    'username' =&gt; env('DB_USERNAME', 'forge'),
    'password' =&gt; env('DB_PASSWORD', ''),
    'unix_socket' =&gt; env('DB_SOCKET', ''),
    'charset' =&gt; 'utf8mb4',
    'collation' =&gt; 'utf8mb4_unicode_ci',
    'prefix' =&gt; '',
    'prefix_indexes' =&gt; true,
    'strict' =&gt; false,
    'engine' =&gt; null,
    'options' =&gt; [    
        PDO::MYSQL_ATTR_SSL_CA =&gt; base_path('RDSCerts/rds-combined-ca-bundle.pem')
    ],
],
</code></pre>

<p>Important note, You might be thinking that when we need to pass <code>--ssl-verify-server-cert</code> option somehow from laravel's configuration as well. Don't worry it's enabled by default. If you want to disable it then you can pass <code>PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT = false</code> which I would not suggest.</p>

<p>There are more options about SSL which you can check in the official PDO <a href="https://www.php.net/manual/en/ref.pdo-mysql.php">documentation</a>.</p>

<p>Once you follow above 3 steps, you should be good to go. Cross check by running <code>DB::select("SHOW STATUS LIKE '%Ssl%'")</code> in tinker as we did earlier in this article. You should see ciphers and ssl version mentioned in the connection.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel finally has higher level orWhere for query scopes]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/"/>
            <updated>2019-03-17T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/</id>
            <content type="html"><![CDATA[<p>Laravel's excellent querybuilder and Eloquent ORM is handy as ever. But with newer version of laravel, it's much more simpler. 5.8 is here already and this feature has not been talked as much because it seems a minor feature release. Let's dive in with an example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Role;

class User extends Authenticatable
{
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [

        'password', 'remember_token',
    ];

    /*
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];

    /**
     * Scope a query to only filter admin users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeAdmin($query)
    {
        return $query-&gt;where('role', Role::Admin);
    }

    /**
     * Scope a query to only filter reviewer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeReviewer($query)
    {
        return $query-&gt;where('role', Role::Reviewer);
    }

    /**
     * Scope a query to only filter customer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeCustomer($query)
    {
        return $query-&gt;where('role', Role::Customer);
    }
}
</code></pre>

<p>The use case is, we want to get the users who are either has <code>admin</code> or <code>reviewer</code> role.</p>

<p>For earlier versions of laravel(version &lt; 5.8), we would do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere(function (Builder $query) {
    $query-&gt;reviewer();
})-&gt;get();
</code></pre>

<p>There is nothing difficult in above eloquent query but having a closure just to filter a scope for an orWhere clause seems too much sometimes. But that case is no more valid after 5.8 releases. Now we can do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere-&gt;reviewer()-&gt;get();
</code></pre>

<p>And that's it. It's a very small change but makes the code much more simpler to implement and read. Sometimes you might get lost in the closures when the query is large. Features like this makes it much more comfortable to implement.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel has one through]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/"/>
            <updated>2019-03-13T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/</id>
            <content type="html"><![CDATA[<p>Laravel 5.8 is now released and one thing from the release notes many people might be waiting for is the <code>hasOneThrough</code> relationship. Laravel ealier had <code>hasManyThrough</code>, but with the addition of <code>hasOneThrough</code> it's more flexible. Let's dive into an example :</p>

<p>Consider we have <code>User</code> Model, <code>Reviewer</code> Model and <code>Activity</code> Model with structure :</p>

<pre><code>users
    id - integer
    reviewer_id - integer

reviewers
    id - integer

activities
    id - integer
    user_id - integer
</code></pre>

<p>Each <code>reviewer</code> has one <code>user</code>, and each <code>user</code> is associated with one user <code>activity</code> record. If we want to get <code>activity</code> from <code>reviewer</code>, there is no <code>reviewer_id</code> column in <code>activities</code> table, in such case we can use <code>hasOneThrough</code> relation. Let's define the relationship now :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough('App\Activity', 'App\User');
    }
}
</code></pre>

<p>To understand more, lets use Laravel conventional terms on the models. In this case the <code>Activity</code> is the final model we would need to relate, while <code>User</code> is the intermediate model.</p>

<p>As all other relationships in Laravel, we can also explicitely specify the foreign keys while definining <code>hasOneThrough</code> relation, Let's do that for this example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough(
            'App\Activity',
            'App\User',
            'reviewer_id', // Foreign key on users table...
            'user_id', // Foreign key on activities table...
            'id', // Local key on reviewers table...
            'id' // Local key on users table...
        );
    }
}
</code></pre>

<p>Now you can easily do :</p>

<pre><code class="php">$reviewer = Reviewer::first();
$activity = $reviewer-&gt;activity;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel liming chunk collection]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/02/12/laravel-limiting-chunk-collection/"/>
            <updated>2019-02-12T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/02/12/laravel-limiting-chunk-collection/</id>
            <content type="html"><![CDATA[<ul>
<li>Little Intro about <code>chunk</code> :</li>
</ul>

<p>Laravel comes up with an excellent Eloquent ORM. There are lot of cool things in Eloquent, one of which is <code>chunk</code> method.</p>

<p>Usually when you need to process large data, lets say you want to update <code>users</code> table and assign a coupon code based on 3rd party APIs.</p>

<p>What you can do is :</p>

<pre><code class="php">User::get()-&gt;each(function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>Doing this is good but if you have thousands of users, loading them all up at once to do the coupon saving process. That's going to take consume a hige memory at a time and maybe the server will be exusted because so much data is stored in memory for processing at a time.</p>

<p>The <code>chunk</code> method helps these kind of implementations. Chunking records means taking a batch of records by a limit, process those, take the next batch processing those and so on... The idea is you are taking a subset of data to process at a time instead of entire data loaded into memory.</p>

<p>The chunk method will retrieve a "chunk" of Eloquent models, feeding them to a given Closure for processing. Using the chunk method will conserve memory when working with large result sets.</p>

<p>Lets do the same but with chunk this time :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::chunk($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>Now, as you can probably guess this will take 50 user records at a time to process, once  those are completed it will take next 50 untill all records are procesed by chunk closure.</p>

<ul>
<li>The main problem <code>Limit</code> with <code>Chunk</code> :</li>
</ul>

<p>Let's apply limit to the above example :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::limit(100)-&gt;chunk($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>If you would think laravel will chunk 50 records in 2 batches are we are limiting the total records to 100, oops not really.</p>

<p>Laravel will do series of queries like below to chunk the records :</p>

<pre><code class="sql">select * from `users` limit 50 offset 0
select * from `users` limit 50 offset 50
select * from `users` limit 50 offset 100
...
</code></pre>

<p>The chunk method <code>ignores</code> any previous eloquent method which applies limit. It can be <code>limit</code> and <code>offset</code> OR <code>take</code> and <code>skip</code>...</p>

<p>This becomes a problem for which lot of people had raised an issue on laravel's github repo. But Laravel's core dev team mentioned this is the expected behaviour and rightfully so.. Chunk itself is using limit to convert entire collection in batches.</p>

<ul>
<li>And.... Here it is.. The Solution you were waiting for :</li>
</ul>

<p>Laravel has a chunk variation called <code>chunkById</code>. Let's use the first example and implement <code>chunkById</code> now :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::chunkById($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>The main and only fundamental difference between <code>chunk</code> and <code>chunkById</code> is how it structures the query.</p>

<pre><code class="sql">select * from `users` where `id` &gt; 0 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 and `id` &gt; 100 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 and `id` &gt; 100 and `id` &gt; 150 order by `id` asc limit 50
...
</code></pre>

<p>If you observer in the queries done by <code>chunkById</code> :</p>

<ol>
<li>It's adding an order by clause to the id column (By the way you can specify the column as 3rd argument to chunkById method if itis not id)</li>
<li>It adds <code>where id &gt; x</code> each time it processes the next batch</li>
<li>There is no <code>offset</code> used and <code>id</code> column is used conceptually as an offset.</li>
</ol>

<p>This gives you an advantage that you can add your offset in the query using <code>id</code> column as a limit just like <code>chunkById</code> is doing internallu.</p>

<p>Let's limit the chunk in our example with 100 records to chunk :</p>

<pre><code class="php">$recodsPerBatch = 50;

$limit = 100;

$maxId = User::orderBy('id', 'asc')-&gt;offset($limit)-&gt;limit(1)-&gt;select('id')-&gt;first()-&gt;id;

User::where('id', '&lt;', $maxId)-&gt;chunkById($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>What we did was, even if we can not use limit directly, we got an id which falls just above the limit we want. Used that to add a where clause of <code>where('id', '&lt;', $maxId)</code>.</p>

<p>This will then chunk the 100 results, with 2 batches of 50 records in each batch. Cool, isn't it!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP argument validation using assert]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/01/12/php-argument-validation-using-assert/"/>
            <updated>2019-01-12T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/01/12/php-argument-validation-using-assert/</id>
            <content type="html"><![CDATA[<p>When creating classes, we either pass arguments to the constructor function or have setter-getter functions to access class properties. These arguments may sometime have a specific format or requirements. For Example :</p>

<pre><code class="php">/**
 * $age integer
 *
 * @return  string
 */
function($age){
    return "You are $age years old";
}
</code></pre>

<p>Above function expects $age to be an integer. If any other type is passed, function will no work as expected.</p>

<p>The example was very granular. When your core classes have functions which affect important domain logics of your project, argument validation becomes an  important part.</p>

<p>PHP comes with default function(or more specifically a language construct for PHP version 7) called <a href="http://php.net/manual/en/function.assert.php"><code>assert</code></a>, which basically checks if provided assertion if false. If yes then you can handle the exceptions in callback. Even if this is useful, I will strongly suggest using composer plugin <a href="https://github.com/webmozart/assert">webmozart/assert</a> for this. It has very useful intuitive methods for the same.</p>

<ul>
<li>Example :</li>
</ul>

<p>Let's consider a function <code>placeOrder()</code> which takes array of <code>$items</code> having instances of <code>Item</code> class, a <code>$shippingPrice</code> and <code>$customer</code> having instance of <code>Customer</code> class.</p>

<pre><code class="php">&lt;?php 

use Webmozart\Assert\Assert;

Class Order{

    /**
     * Array of Item instances
     * @var array
     */
    private $items;

    /**
     * Shipping Price
     * @var float
     */
    private $shippingPrice;

    /**
     * Customer Instance
     * @var Customer
     */
    private $customer;

    /**
     * Instantiate Order class
     * 
     * @param $items
     * @param $shippingPrice
     * @param $customer
     */
    function __construct($items, $shippingPrice, $customer)
    {
        Assert::isArray($items, '$items must be an array. Got: %s');
        Assert::allIsInstanceOf($items, '\Item', '$items must contain array of Item class instances. Got: %s');
        Assert::numeric($shippingPrice, '$shippingPrice must be numeric. Got: %s');
        Assert::isInstanceOf($customer, '\Customer', '$customer must be an instance of Customer class. Got: %s');

        $this-&gt;shippingPrice    = $shippingPrice;
        $this-&gt;customer         = $customer;
        $this-&gt;items            = $items;
    }

    /**
     * Places order
     * 
     * @return Order
     */
    public function placeOrder(){

        // PlaceOrder
    }
}
</code></pre>

<p>Now, when we instantiate the order class :</p>

<pre><code class="php">$customer = new Customer('John Doe');

$order = new Order([], 12.22, $customer);
</code></pre>

<p>We are passing an invalid value for <code>$items</code> argument. It will throw <code>\InvalidArgumentException</code> with error message : <code>$items must contain array of Item class instances. Got: Array</code>.</p>

<p>If you are using setter-getter functions instead of constructor parameters, you can have these assertions inside the setter functions. Above methodology is sometimes referred as defensive programming where we are making sure function will not break at the intial stages itself. The counter concept of defensive programming will be validating these arguments as and when they are actually used inside <code>placeOrder</code> function.</p>

<p>Advantages :</p>

<ol>
<li>Prevents errors caused due to unexpected type of arguments passed</li>
<li>Easier to debug</li>
<li>Easier to create unit tests and catch asset exceptions</li>
<li>Easier to write readable custom error messages</li>
</ol>

<p>Disadvantages :</p>

<p>If not properly thought, duplicate validations can cause redundancies. For example in above case, if instance of <code>Item</code> class contains a valid price is a concern of <code>Item</code> class. If that validation is also present in <code>Order</code> class as well, it created redundancies.</p>

<p>You can find more assertion options available here : <a href="https://github.com/webmozart/assert">https://github.com/webmozart/assert</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel make custom class using console command]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/01/11/laravel-make-custom-class-using-console-command/"/>
            <updated>2019-01-11T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/01/11/laravel-make-custom-class-using-console-command/</id>
            <content type="html"><![CDATA[<p>Laravel ships with built in console <code>make</code> commands to generate class files for controllers, models, migrations etc. For example creating a resourse controller, you can do :</p>

<pre><code class="bash">php artisan make:controller CustomerController --resource
</code></pre>

<p>Depending in your project structure and design patterns, you might be using different classes like repositories, services etc. We can take advantage of console commands to save time and create it just like we created controller above.</p>

<h3 id="file-generation-%3A">File generation :</h3>

<p>We firstly create a template file which is like a blueprint of how thw new class file will look like. This file is called <code>stub</code> file.</p>

<p>Then when command is run, we simply copy the stub to <code>class.php</code> and replace the dummyclass, dummynamespace etc with the new files class and namespace.</p>

<p>Above steps are made much simpler by <code>GeneratorCommand</code> class.</p>

<h3 id="the-generatorcommand-class-%3A">The GeneratorCommand class :</h3>

<p>Laravel's make commands extend an abstract class <code>GeneratorCommand</code>. This class basically has all the methods which do making a directory, getting content of stub, replacing class &amp; namespace, saving the new file and so on.</p>

<p>This is an abstract class which then extends the Illuminate <code>command</code> class.</p>

<h3 id="example-%3A">Example :</h3>

<p>Let's create a make command for generating <code>Repository</code> for a model.</p>

<ul>
<li>Create the stub :</li>
</ul>

<p>Create a directory called <code>stubs</code> in laravel project root. I really like non-php files outside the app folder, you can put the stubs in the location you prefer.</p>

<p>Create a new file inside <code>stubs</code> directory called <code>Repository.stub</code>. We are eliminating the repository specific functions as the goal is to focus on creating class file. You can add your repository functions inside the stub or maybe create a base class and extend stubs class from it.</p>

<pre><code class="php">&lt;?php

namespace DummyNamespace;

use App\DummyModel;

class DummyRepository
{
    protected $model;
    /**
       * Instantiate reporitory
       * 
       * @param DummyModel $model
       */
    public function __construct(DummyModel $model)
    {
        $this-&gt;model = $model;
    }

    // Your methods for repository
}
</code></pre>

<p>The usual idea is whatever is to be replaced, we prefix it with <code>Dummy</code>.</p>

<ul>
<li>Creating command :</li>
</ul>

<p>Let's create command scaffolding from artisan :</p>

<pre><code class="bash">php artisan make:command RepositoryMakeCommand
</code></pre>

<p>The make command classes are generally named in format <code>WhatToCreateMakeCommand</code>. If we had to create a service class, we could say <code>ServiceMakeCommand</code>.</p>

<p>We need to edit the <code>RepositoryMakeCommand.php</code> file which will be generated inside <code>app/Console/Commands</code> folder.</p>

<pre><code class="php">&lt;?php

namespace App\Console\Commands;

use Illuminate\Console\GeneratorCommand;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Exception\InvalidArgumentException;

class RepositoryMakeCommand extends GeneratorCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $name = 'make:repository';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create a new model repository';

    /**
     * The type of class being generated.
     *
     * @var string
     */
    protected $type = 'Repository';

    /**
     * The name of class being generated.
     *
     * @var string
     */
    private $repositoryClass;

    /**
     * The name of class being generated.
     *
     * @var string
     */
    private $model;

    /**
     * Execute the console command.
     *
     * @return bool|null
     */
    public function fire(){

        $this-&gt;setRepositoryClass();

        $path = $this-&gt;getPath($this-&gt;repositoryClass);

        if ($this-&gt;alreadyExists($this-&gt;getNameInput())) {
            $this-&gt;error($this-&gt;type.' already exists!');

            return false;
        }

        $this-&gt;makeDirectory($path);

        $this-&gt;files-&gt;put($path, $this-&gt;buildClass($this-&gt;repositoryClass));

        $this-&gt;info($this-&gt;type.' created successfully.');

        $this-&gt;line("&lt;info&gt;Created Repository :&lt;/info&gt; $this-&gt;repositoryClass");
    }

    /**
     * Set repository class name
     *
     * @return  void
     */
    private function setRepositoryClass()
    {
        $name = ucwords(strtolower($this-&gt;argument('name')));

        $this-&gt;model = $name;

        $modelClass = $this-&gt;parseName($name);

        $this-&gt;repositoryClass = $modelClass . 'Repository';

        return $this;
    }

    /**
     * Replace the class name for the given stub.
     *
     * @param  string  $stub
     * @param  string  $name
     * @return string
     */
    protected function replaceClass($stub, $name)
    {
        if(!$this-&gt;argument('name')){
            throw new InvalidArgumentException("Missing required argument model name");
        }

        $stub = parent::replaceClass($stub, $name);

        return str_replace('DummyModel', $this-&gt;model, $stub);
    }

    /**
     * 
     * Get the stub file for the generator.
     *
     * @return string
     */
    protected function getStub()
    {
        return  base_path('stubs/Repository.stub');
    }
    /**
     * Get the default namespace for the class.
     *
     * @param  string  $rootNamespace
     * @return string
     */
    protected function getDefaultNamespace($rootNamespace)
    {
        return $rootNamespace . '\Repo';
    }

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            ['name', InputArgument::REQUIRED, 'The name of the model class.'],
        ];
    }
}
</code></pre>

<ul>
<li>Registering the command :</li>
</ul>

<p>Finally we need to register this command to make available in artisan console. We can do that by adding it inside <code>app/Console/Kernel.php</code>.</p>

<p>Inside <code>protected $commands = []</code> array add the class path :</p>

<pre><code class="php">\App\Console\Commands\RepositoryMakeCommand::class,
</code></pre>

<ul>
<li>Using the command :</li>
</ul>

<pre><code class="bash">php artisan make:repository Customer
</code></pre>

<p>This will create a <code>CustomerRepository.php</code> inside <code>app/Repo</code> folder :</p>

<pre><code class="php">&lt;?php

namespace App\Repo;

use App\Customer;

class CustomerRepository
{
    protected $model;
    /**
       * Instantiate reporitory
       * 
       * @param Customer $model
       */
    public function __construct(Customer $model)
    {
        $this-&gt;model = $model;
    }

    // Your methods for repository
}
</code></pre>

<p>You can extend this implementation as per your project structure needs. This indeed saves time in longer run and makes sure all generated classes have common blueprint structure.</p>
]]></content>
        </entry>
    </feed>