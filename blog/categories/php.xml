<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="https://techsemicolon.github.io/blog/categories/php.xml" rel="self"/>
    <link href="https://techsemicolon.github.io/"/>
    <updated>2020-02-05T12:38:41+00:00</updated>
    <id>https://techsemicolon.github.io/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[PHP OPcache important settings and revalidation simplified]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/10/05/php-fpm-and-opcache-settings-and-invalidation-simplified/"/>
            <updated>2019-10-05T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/10/05/php-fpm-and-opcache-settings-and-invalidation-simplified/</id>
            <content type="html"><![CDATA[<h3 id="about-opcache-%3A">About OPcache :</h3>

<p>PHP as a language is an interpreted. But the interpretation happens from the binaries. These binaries are compiled into intermediate bytecodes. OPcache comes into picture during the compilation phase where it stores the precompiled script's bytecodes into a shared memory. When next time PHP needs to compile the same PHP script, the precompile bytecodes from the shared memory are used.. Therefore removing the requirement for PHP to load and parse scripts on each request. As a result improving overall PHP performance.</p>

<p>The OPcache extension is bundled with PHP 5.5.0 and later versions.</p>

<h3 id="why-it-is-needed-%3A">Why it is needed :</h3>

<p>Okay wait... Let's really get into a very vital need of this OPcache in the ever growing world of PHP frameworks. Any PHP framework has some core package files which we never change. These php package files really let us use the framework capabilities. For example for laravel, we have <code>illuminate</code>'s laraval packages. Now on top of that, we install new PHP packages as and when needed using dependency managers like <code>composer</code>. We hardly change these files unless we update/install/remove a package dependency.</p>

<p>Now, independent of which PHP framework you are using, these core PHP script files which constitute framework more or less are compiled for each request to generate their bytecodes for interpretation. Similarly, the dependency package PHP script are compied as per their need for that particular request.</p>

<p>Why do we really need to compile these core PHP script files which we indeed hardly change?? Isn't that an overly unneccessary overhead for PHP compilation process to compile these hundreds of PHP script files on each request and thenm intrepret them? Doesn't make much sense right? There you go.. OPcache to the rescue...</p>

<h3 id="important-settings-of-opcache-%3A">Important settings of OPcache :</h3>

<p>As OPcache overall sounds really fascinating which internally optimizes the compilation process of PHP scripts, it is equally important to know the important settings. Cache handling, cache clearing and cache storing and overall invalidation depends on these settings.</p>

<ul>
<li>Finding the php.ini to work with : 
You need to find the php.ini which is currently in use. There are different ways to find it. You can find it from terminal using :</li>
</ul>

<pre><code class="bash">php --ini | grep -i loaded
</code></pre>

<p>OR create a temporary script file called 'info.php` and have following content on it :</p>

<pre><code class="php">phpinfo();
</code></pre>

<p>Once you open this file into browser, you would be able to see which php.ini is used.</p>

<p>Mostly if you have php version 7.x with fpm installed then it will be inside <code>/etc/php/7.x/fpm/php.ini</code>. Or if you have 7.x with apache2 installed then it will be inside <code>/etc/php/7.x/apache2/php.ini</code>.</p>

<ul>
<li><p>Enable opcache :</p>

<p>In the loaded and used <code>php.ini</code>, you can enable and disable opcache by updating following directive :</p>

<pre><code>opcache.enable=1 //Enables OPcache
opcache.enable=0 //Disables OPcache
</code></pre>

<p>OPCache also can be enabled for CLI, PHP running from the command line interface(terminal) :</p>

<pre><code>opcache.enable_cli=1 //Enables OPcache
opcache.enable_cli=0 //Disables OPcache
</code></pre></li>
<li><p>OPcache RAM usage :</p>

<p>When the entire cache is stored into shared memory, the default max size of that memory storage is <code>64MB</code> before PHP <code>7.0.0</code> and <code>128MB</code> for after versions. You can update it as per your memory. Ideally 64MB to 128MB size is more than enough for most of the PHP frameworks.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.memory_consumption=128
</code></pre></li>
<li><p>Cached script limit :</p>

<p>By default OPcache can cache <code>2000</code> files before PHP <code>7.0.0</code> and <code>10000</code> for after versions. You can increase this number as per your requirement. For frameworks like PHP Magento you could probably have this value bumped up as the core files are large in number.</p>

<p>First know count of PHP scripting files in your codebase :</p>

<pre><code class="bash"># Make sure you change this path as per your setup
cd  /var/www/html 
# Count number of php files
find . -type f -print | grep php | wc -l
</code></pre>

<p>Now above will givbe you a numeric count of total PHP script files in your codebase. Now you can set OPcache setting accordingly. In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.max_accelerated_files=20000
</code></pre></li>
<li><p>Set automated cache clearing :</p>

<p>When you have new updates in cached PHP script files, OPcache will attempt to clear and then revalidate their cache. This is set using <code>validate_timestamps</code> directive and it happens periodically based on other directive setting <code>revalidate_freq</code>. When this directive is disabled, you MUST reset OPcache manually via opcache_reset(), opcache_invalidate() or by restarting the Web server for changes to the filesystem to take effect.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.validate_timestamps=1 //Enabled
opcache.validate_timestamps=0 //Disabled
</code></pre></li>
<li><p>Revalidation and it's frequency :</p>

<p>OPcache revalidates the opcache afer certain number of seconds to check if your code has changed. <code>0</code> value signifies that it checks your PHP code every single request which is unneccessary.
By default it happens every 2 seconds. If you have PHP files changing hardly on your setup, it makes sence to increase the frequency duration. As revalidation also takes memory, bumping this up might save unneccessary memory revalidation usage.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.revalidate_freq=120
</code></pre>

<p>OR you can totally disable this revalidation by updating following directive :</p>

<pre><code>opcache.validate_timestamps=0 //Disables OPcache revalidation
</code></pre>

<p>In your development or sandbox environment you can set this to 0 so that changes take effect immediately. However, it is as good as disabling which can save lot of syscalls.</p></li>
<li><p>Skipping caching selecively :</p>

<p>If you know that let's say <code>user.php</code> file in your framework changes often and you do not really want to clear cache everytime it changes. You can basically have OPcache ignore the caching of this file. It is called blacklisting file in terms of OPcache. This setting is littlbit different. It takes an absolute path location of a <code>.txt</code> file. In this text file you can specify the files you want to blacklist(skip) for caching.
In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.blacklist_filename=/etc/php/7.x/fpm/opcache_blacklist.txt
</code></pre>

<p>You can have whatever name you want for this text file. And then inside <code>opcache_blacklist.txt</code> :</p>

<pre><code class="bash">#Specific file inside /var/www/html/
/var/www/html/user.php 

#All files starting with user* inside /var/www/html/
/var/www/html/user

#Wildcare usage inside /var/www/html/
/var/www/*-user.php
</code></pre></li>
<li><p>Increasing request response shutdown :</p>

<p>PHP OPcache uses a mechanism which checks for repetitive occurances of strings and internally stores single value of it with remaining ones having pointer to the same value. The fascinating thing is instead of having a pool of these strings for each and every FPM process, this shares it across all of your FPM processes.</p>

<p>In OPcache settings, you can control how much memory this process can use from directive <code>opcache.interned_strings_buffer</code> Its default value is <code>4</code>(MB) before PHP <code>7.0.0</code> and <code>8</code>(MB) for after versions.</p>

<p>In the loaded and used <code>php.ini</code>, you can change this setting by updating following directive :</p>

<pre><code>opcache.interned_strings_buffer=12
</code></pre></li>
</ul>

<p>Note that to have changes to take effect from php.ini, you need to restart PHP FPM or apache2 depending on your setup.</p>

<h3 id="clearing-the-opcache-%3A">Clearing the OPcache :</h3>

<p>When OPcache is enabled, any changes in cached PHP script files will not take effect until OPcache is cleared or it is revalidated. This is applicable when you release new updates into a OPcache enabled PHP server.</p>

<p>To clear cache there are multiple ways :</p>

<ul>
<li><p>Clearing from browser :</p>

<p>You can have a file <code>opcache_refresh.php</code> with following content :</p>

<pre><code class="php">try{
    opcache_reset();
    echo "OPcache has been cleared successfully!";
}
catch(\Exception $e){
    echo "Oops.. OPcache could not be cleared!";
}
</code></pre>

<p>When you request this file from browser, it will reset(clear) the opcache and any new changes done inside the cached files will start reflecting.</p></li>
<li><p>Clearing from terminal :</p>

<p>If you have nginx with PHP FPM :</p>

<pre><code class="bash">sudo service php7.x-fpm reload
</code></pre>

<p>If you have apache2 :</p>

<pre><code class="bash">sudo service apache2 reload
</code></pre></li>
<li><p>Using cachetool :</p>

<p>This is very useful when you do not want to have an open PHP file to reset opcache and you do not want to reload FPM or apache2 for the same. <a href="http://gordalina.github.io/cachetool/"><code>cachetool</code></a> is a way between the two :</p>

<p>To Install  :</p>

<pre><code class="bash">// Download the phar
curl -sO http://gordalina.github.io/cachetool/downloads/cachetool.phar
// Set permissions
chmod +x cachetool.phar
</code></pre>

<p>Now you can clear opcache using following command :</p>

<pre><code class="bash">// Using an automatically guessed fastcgi server
php cachetool.phar opcache:reset --fcgi

// Using php fpm socket
php cachetool.phar opcache:reset --fcgi=/var/run/php7.x-fpm.sock
</code></pre></li>
</ul>

<h3 id="opcache-and-the-automated-deployments-%3A">OPcache and the automated deployments :</h3>

<p>When you have automated deployments set up on your PHP server, you need to incorporate OPcache clearing so that new changes take effect.</p>

<p>If you do not perform this manually, eventually OPcache will revalidate itself based on your OPcache revalidation settings assuming you have <code>validate_timestamps</code> set to <code>1</code>. But it is pretty handy to do it manually as part of your automated deployment scripts to make sure changes take immediate effect.</p>

<p>From my personal experience, relading FPM or apache2 to clear OPcache is not a good option. Even if it gracefully reloads PHP processes, any request which is(unfortunarely) ongoing on the server gives <code>502 bad gateway</code>. I would rather use the alternative like <code>cachetool</code> mentioned in above section which does not affect any ongoing PHP processes at all.</p>

<p>The sequence when you reload OPcache matters. As soon as git or any of your deployment methods pulls the latest PHP code changes, you should first clear the OPcache. Then you can run all the remaining deployment commands which may use the updated PHP files. This makes sure the deployment commands do not use cached PHP script opcodes even when the sever has pulled the latest changes.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel APP_KEY rotation policy for app security]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/06/14/laravel-app-key-rotation-policy-for-security/"/>
            <updated>2019-06-14T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/06/14/laravel-app-key-rotation-policy-for-security/</id>
            <content type="html"><![CDATA[<p>If you have an existing laravel app running or you do fresh laravel installation, you will notice in your app's <code>.env</code> file (in case of new installations it's in <code>.env.example</code> file), there is a key called <code>APP_KEY</code>. It is a  32 characters long string. This is the laravel application key.</p>

<p>Laravel has an artisan command <code>php artisan key:generate</code> which generates a new <code>APP_KEY</code> for you. If you have installed Laravel via Composer or the Laravel installer, this key will be set for you automatically by the <code>key:generate</code> command.</p>

<h4 id="why-your-app-key-is-important%3F">Why your app key is important?</h4>

<p>The <code>APP_KEY</code> is used to keep your user sessions and other encrypted data secure! If the application key is not set, your user sessions and other encrypted data will not be secure. Believe it or not it is a big security risk.</p>

<p>To give you more specific context, earlier laravel had a security issue :</p>

<p><code>If your application's encryption key is in the hands of a malicious party, that party could craft cookie values using the encryption key and exploit vulnerabilities inherent to PHP object serialization / unserialization, such as calling arbitrary class methods within your application.</code></p>

<p>Do not worry, laravel later released a security update which disabled all serialization and unserialization of cookie values using <code>APP_KEY</code>. All Laravel cookies are encrypted and signed, cookie values can be considered safe from client tampering. <a href="https://laravel.com/docs/5.6/upgrade#upgrade-5.6.30"><code>clich here</code></a> to see details about this security update.</p>

<p>Before Update :</p>

<p>If used to serialize all values during encryption.</p>

<pre><code class="php">$encryptedValue = \openssl_encrypt(serialize($value), $this-&gt;cipher, $this-&gt;key, 0, $iv);
</code></pre>

<p>After Update :</p>

<p>It will serialize only if you pass second parameter as <code>true</code> while calling encrypt function.</p>

<pre><code class="php">$encryptedValue = \openssl_encrypt(
    $serialize ? serialize($value) : $value,
    $this-&gt;cipher, $this-&gt;key, 0, $iv
);
</code></pre>

<p>Okay, to sum it up, <code>APP_KEY</code> is important and any backdoor associated with it which leads to compromising app security should be closed.</p>

<h4 id="passwords-and-app_key-%3A">Passwords and APP_KEY :</h4>

<p>When we consider parts of the app which have encryption, first thing comes to mind is the user passwords. Let's take a minute to differentiate both :</p>

<ul>
<li>Encryption :</li>
</ul>

<p>Encryption is when you have a data which you want to safeguard. So you take original data, encrypt it using key and ciphers so it turns into gibrish string. This gribrish string has no meaning and hence it can not be interpreter directly toits original data meaning. When you need, you can decrypt this encrypted value to retrive it in original state.</p>

<p>Laravel has <code>Crypt</code> facade which helps us implement encryption and decryption.</p>

<p>In this case, the <code>key</code> and <code>ciphers</code> are important because those are used in decryption. And should NOT be explosed.</p>

<ul>
<li>Hashing :</li>
</ul>

<p>Hashing in simple terms is one way encryption. Once you encrypt you can NOT decrypt it in original state. You can verify if the hash matches a plain value to check if its the original value or not. But that's all you can do. It is way more secure in terms of sensitive information like user passwords.</p>

<p>Laravel has <code>Hash</code> facade which helps us implement one way hashing encryption.</p>

<p>Now, one of the main thing you should understand : APP_KEY is <code>NOT</code> used in Hashing and it is used in encryption. So your passwords security is NOT dependent on the APP_KEY. Whereas any data of your app which you have encrypted <code>do have</code> dependency on APP_KEY.</p>

<h4 id="affects-of-changing-app_key-%3A">Affects of changing APP_KEY :</h4>

<p>Before we dive into how to change APP_KEY, it is important to know what will happen if we change it. When APP_KEY is changed in an existing app :</p>

<ul>
<li>Existing user sessions will be invalidated. Hence, all your currently active logged in users will be logged out.</li>
<li>Any data in your app which you have encrypted using <code>Crypt</code> facade or <code>encrypt()</code> helper function will no longer be decrypted as the encryption uses APP_KEY.</li>
<li>Any user passwords will NOT be affected so no need to worry about that.</li>
<li>If you have more than one app servers running, all should be replaced with the same APP_KEY.</li>
</ul>

<h4 id="let%27s-handle-the-headache-first-%3A">Let's handle the headache first :</h4>

<p>As seen above, you can imagine most headache in changing APP_KEY is handling the data which is encrypted using old app key. For that you need to first decrypt the data using old APP_KEY and then re-encrypt using new APP_KEY. Damn!</p>

<p>Don't worry! Here is a simple helper function you can use :</p>

<pre><code class="php">/**
 * Function to re-encrypt when APP_KEY is rotated/changed
 * 
 * @param string $oldAppKey
 * @param mixed $value
 */
function reEncrypt($oldAppKey, $value)
{
    // Get cipher of encryption
    $cipher = config('app.cipher');
    // Get newly generated app_key
    $newAppKey = config('app.key');

    // Verify old app Key
    if (Str::startsWith($oldAppKey, 'base64:')) {
        $oldAppKey = base64_decode(substr($oldAppKey, 7));
    }
    // Verify new app Key
    if (Str::startsWith($newAppKey, 'base64:')) {
        $newAppKey = base64_decode(substr($newAppKey, 7));
    }

    // Initialize encryptor instance for old app key
    $oldEncryptor = new Illuminate\Encryption\Encrypter((string)$oldAppKey, $cipher);

    // Initialize encryptor instance for new app key
    $newEncryptor = new Illuminate\Encryption\Encrypter((string)$newAppKey, $cipher);

    // Decrypt the value and re-encrypt
    return $newEncryptor-&gt;encrypt($oldEncryptor-&gt;decrypt($value));
}
</code></pre>

<p>Let's imagine we have a column called <code>bank_account_number</code> in <code>users</code> table which is stored as encrypted string. I have another column called <code>old_bank_account_number</code> in the <code>users</code> table to store old value as a backup before we save newly re-encrypted value. We can create a command <code>php artisan encryption:rotate</code> :</p>

<pre><code class="php">&lt;?php

namespace App\Console\Commands;

use App\User;
use Illuminate\Console\Command;
use Illuminate\Encryption\Encrypter;

class EncryptionRotateCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'encryption:rotate {--oldappkey= : Old app key}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Re-encrypt when APP_KEY is rotated';

    /**
     * Create a new command instance.
     *
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Function to re-encrypt when APP_KEY is rotated/changed
     * 
     * @param string $oldAppKey
     * @param mixed $value
     */
    public function handle()
    {
        // Get the old app key
        $oldAppKey = $this-&gt;option('oldappkey');

        // Get cipher of encryption
        $cipher = config('app.cipher');
        // Get newly generated app_key
        $newAppKey = config('app.key');

        // Verify old app Key
        if (Str::startsWith($oldAppKey, 'base64:')) {
            $oldAppKey = base64_decode(substr($oldAppKey, 7));
        }
        // Verify new app Key
        if (Str::startsWith($newAppKey, 'base64:')) {
            $newAppKey = base64_decode(substr($newAppKey, 7));
        }

        // Initialize encryptor instance for old app key
        $oldEncryptor = new Encrypter((string)$oldAppKey, $cipher);

        // Initialize encryptor instance for new app key
        $newEncryptor = new Encrypter((string)$newAppKey, $cipher);

        User::all()-&gt;each(function($user) use($oldEncryptor, newEncryptor){

            // Stored value in a backup column
            $user-&gt;old_bank_account_number  = $user-&gt;bank_account_number;

            // Decrypt the value and re-encrypt
            $user-&gt;bank_account_number  = $newEncryptor-&gt;encrypt($oldEncryptor-&gt;decrypt($user-&gt;bank_account_number));
            $user-&gt;save();

        });

        $this-&gt;info('Encryption completed with newly rotated key');
    }
}
</code></pre>

<h3 id="update-%3A">Update :</h3>

<p>I have pushed a new package which helps to simplify above implementation. <a href="https://github.com/techsemicolon/laravel-app-key-rotation"><code>click here</code></a> to view the Laravel package.</p>

<h4 id="rotating-the-key-%3A">Rotating the key :</h4>

<p>Finally, lets rotate the key.</p>

<pre><code>- Run `php artisan down` on all instances so that no user can interact until this is done
- Go to terminal on one of the instance and open your `.env` file. 
- Copy the APP_KEY value which is the old(existing) app key
- Run `php artisan key:generate` which will generate a new APP_KEY
- Run the helper command as we created above to re-encrypt the values `php artisan encryption:rotate --oldappkey=your_old_app_key_value`
- Replace the APP_KEY key on all remaining instances
- Run `php artisan config:clear` on all instances
- Run `php artisan cache:clear` on all instances
- Run `php artisan view:clear` on all instances
- Run `php artisan view:clear` on all instances
- Run `php artisan up` on all instances
</code></pre>

<p>And.. It's done! You can do this based on key rotation frequency you are comfortable in. I would recommend at-least once in 3 months.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Everything you need to know about laravel required validations]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/05/30/laravel-validation-required-if-with-unless-all-and-custom-if/"/>
            <updated>2019-05-30T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/05/30/laravel-validation-required-if-with-unless-all-and-custom-if/</id>
            <content type="html"><![CDATA[<p>One of the strong part of the laravel core is the set of <code>validations</code> which validate your application's incoming data. One of the most common validation rule which is used in applications is <code>required</code>. We will see how can we make use of different types of required rules as well as build custom required rules conditionally.</p>

<ul>
<li>Required rule :</li>
</ul>

<p>As per the laravel's documentation. when we use <code>required</code> rule, the field under validation must be present and also it should be non-empty. Empty includes null value, empty string, empty array and uploaded file with no path.</p>

<p>In below request both <code>first_name</code> and <code>last_name</code> should be present and non-empty.</p>

<pre><code class="php">$request-&gt;validate([
    'first_name' =&gt; 'required|unique:posts|max:255',
    'last_name' =&gt; 'required',
]);
</code></pre>

<ul>
<li>Required rule based on other/supporting field(s) :</li>
</ul>

<p>Many times when designing complex and nested forms, we need to have required validation <code>only if</code> an other incoming data field is present. Now there are multiple cases in this :</p>

<ol>
<li>When you want <code>just single supporting field to be present</code>, then  you can use <code>required_with</code> like below :</li>
</ol>

<p>In below request the <code>city</code>, <code>state</code>, <code>zipcode</code> and <code>country</code> will be required if <code>address_line</code> is present in the incoming data.</p>

<pre><code class="php">$request-&gt;validate([
    'address_line' =&gt; 'sometimes|boolean',
    'city' =&gt; 'required_with:address_line',
    'state' =&gt; 'required_with:address_line',
    'zipcode' =&gt; 'required_with:address_line',
    'country' =&gt; 'required_with:address_line'
]);
</code></pre>

<ol start="2">
<li>When you want <code>any one of the supporting set of fields just to be present</code>, then  you can use <code>required_with</code> and pass multiple fields like below :</li>
</ol>

<p>In below request the we want to set validation rule for the <code>notify_new_updates</code> field. We can not notify if we do not have either of user phone number, email or fax. So the validation  <code>required_with:phone,email,fax</code> signifies that <code>notify_new_updates</code> will be required if one of the field phone, email or fax is present.</p>

<pre><code class="php">$request-&gt;validate([
    'name' =&gt; 'required|string',
    'phone' =&gt; 'sometimes|string',
    'email' =&gt; 'sometimes|email',
    'fax' =&gt; 'sometimes|string',
    'notify_new_updates' =&gt; 'boolean|required_with:phone,email,fax'
]);
</code></pre>

<ol start="3">
<li>When you want <code>all of the supporting set of fields to be present</code>, then you can use <code>required_with_all</code> and pass multiple fields like below :</li>
</ol>

<p>In below request the validation <code>required_with_all:phone,email,fax</code> signifies that <code>notify_new_updates</code> will be required if all the field phone, email and fax are present.</p>

<pre><code class="php">$request-&gt;validate([
    'name' =&gt; 'required|string',
    'phone' =&gt; 'sometimes|string',
    'email' =&gt; 'sometimes|email',
    'fax' =&gt; 'sometimes|string',
    'notify_new_updates' =&gt; 'boolean|required_with_all:phone,email,fax'
]);
</code></pre>

<ol start="4">
<li>When you want <code>any one of the supporting set of fields NOT to be present</code>, then  you can use <code>required_without</code> and pass one or more fields like below :</li>
</ol>

<p>In below request the <code>use_billing_as_shipping</code> will be required when <code>shipping_address</code> is NOT present.</p>

<pre><code class="php">$request-&gt;validate([
    'billing_address' =&gt; 'required|string',
    'shipping_address' =&gt; 'sometimes|string',
    'use_billing_as_shipping' =&gt; 'boolean|required_without:shipping_address'
]);
</code></pre>

<p>Similarly you can use <code>required_without_all</code> where it will need <code>sll of the supporting set of fields NOT to be present</code>.</p>

<ol start="5">
<li>When you want the other field not only to be present but also it should have a very specific value, then you can use <code>required_if</code> like below</li>
</ol>

<p>In below request the <code>admin_notification_email</code> will be required if and only if the <code>is_admin</code> field is present having value of <code>1</code>.</p>

<pre><code class="php">$request-&gt;validate([
    'is_admin' =&gt; 'required|boolean',
    'admin_notification_email' =&gt; 'required_if:is_admin,1|email',
]);
</code></pre>

<ol start="6">
<li>When you want the other field not only to be present but it should have a very specific value, then you can use <code>required_if</code> like below</li>
</ol>

<p>In below request the <code>displayname</code> will be required unless the <code>nickname</code> field is empty.</p>

<pre><code class="php">$request-&gt;validate([
    'nickname' =&gt; 'sometimes|string',
    'displayname' =&gt; 'required_unless:nickname,',
]);
</code></pre>

<ul>
<li>Custom and complex required if validation rules :</li>
</ul>

<p>We sometimes need to have complex set of conditional rule for required if. With laravel it's much easier than you could have imagined.</p>

<p>Laravel's <code>Rule</code> facade has <code>Rule::requiredIf()</code> method which we can use for this purpose. The beautify of this method is, it takes a boolean value or a closure which return a boolean value. This gives us lot of flexibility to have complex logic for required if rule.</p>

<ol>
<li>requiredIf() with simple boolean :</li>
</ol>

<p>Below example will make <code>employee_id</code> field required only if current user is an employee and the employee's company is still active.</p>

<pre><code class="php">$request-&gt;validate([
    'employee_id' =&gt; Rule::requiredIf($request-&gt;user()-&gt;is_employee &amp;&amp; $request-&gt;user()-&gt;employee-&gt;company-&gt;is_active)
]);
</code></pre>

<ol start="2">
<li>requiredIf() with closure :</li>
</ol>

<p>Below example will make <code>golden_discount_voucher</code> field required only if current user is a customer and has orders to fillfull criteria that the customer belongs to golden account category.</p>

<pre><code class="php">$request-&gt;validate([
    'golden_discount_voucher' =&gt; Rule::requiredIf(function() use($request){

        return  $request-&gt;user()-&gt;is_customer &amp;&amp;
                $request-&gt;user()-&gt;customer-&gt;orders-&gt;where('orders.grand_total', '&gt;', '1000')-&gt;count() &gt; 10;
    })
]);
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Composer stuck at Something&#039;s changed looking at all rules again]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/05/20/composer-stuck--at-something-changed-looking-at-all-rules-error/"/>
            <updated>2019-05-20T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/05/20/composer-stuck--at-something-changed-looking-at-all-rules-error/</id>
            <content type="html"><![CDATA[<p>While upgrading one of my laravel application from version 5.3 to 5.4, I came across a weird situation which was coming from composer dependency management. The situation was that when running composer install it was getting stuck at  <code>Something's changed looking at all rules again(1)</code> and composer was showing counter of attempts in brackets which was increasing from 1 to 900+. It took arund 2+ hours composer update was stuck in this situation and attempts counter was increasing, even when the system where application was hosted had pretty good configurations.</p>

<ul>
<li>How do I get this information :</li>
</ul>

<p>When you run composer command, lets say <code>composer install</code>, it does internal steps it's supposed to do one by one. However, we just see the high level output in command promt and not the details of steps. Similarly, the error message I saw can not be seen directly if you just do <code>composer install</code>. You need to make the output more verbose by passing <code>-v</code> command line argument. You can pass upto 3 v's to get more verbosity</p>

<p>For e.g. :</p>

<pre><code class="bash">`composer install -vvv`
</code></pre>

<p>When I did this, I got lot of detailed steps whats composer is doing internally, one of these verbose messages was the error message <code>Something's changed looking at all rules again(1)</code></p>

<ul>
<li>Why composer gets stuck :</li>
</ul>

<p>Okay, to explain it's comparatively easy to understand why it gets stuck. Let's take an example that application has 2 packages <code>techsemicolon/package-first</code> and  <code>techsemicolon/package-second</code>:</p>

<pre><code class="json">"require": {
    "php": "&gt;=5.6.4",
    "techsemicolon/package-first": "5.4.*",
    "techsemicolon/package-second": "2.3.*",
    .
    .
    .
    .
}
</code></pre>

<p>Now the both these packages have package <code>techsemicolon/dependency-package</code> in their own dependencies. But</p>

<pre><code>`techsemicolon/package-first` requires `techsemicolon/dependency-package` at version `2.*.*` 
`techsemicolon/package-second` requires `techsemicolon/dependency-package` at version `3.*.*`. 
</code></pre>

<p>Now, it's really confusing for composer to now decide if it should install the <code>techsemicolon/dependency-package</code> at version <code>2.*.*</code> or <code>3.*.*</code>. When we do composer install or update, it calculates these dependency trees and decide which version to install/update to. It checks the dependency rules defined in <code>composer.json</code> of application as well as those in individual package as their dependencies. Hence it gets stuck at <code>Something's changed looking at all rules again</code>.</p>

<p>Now, there can be situation where it recalculatues the rules again and shows this message but within a minute or two it finds the version which can satisfy the dependencies and proceeds. But in cases like mine, it calculates the rules in circles and gets stuck for really really long time.</p>

<ul>
<li>The solution :</li>
</ul>

<p>A note to start with, this is not the only or best solution to resolve this. But, considering this error is little different than commonly occuring composer errors, this is what I could do to resolve this quickly and effectively.</p>

<ol>
<li><p>Let's consider your composer has 15 packages in <code>require</code> dependency section of your app's main <code>composer.json</code>. I followed an approach which is very neive, I divided those 15 depencies into 3 sections of 5. I commented out first 5 and ran composer install. It if still gets stuck at error, then I commented out next 5 and uncommented first 5 and ran composer install again. I kept doing this until I found a faulty batch which if I comment out then composer install works properly. I kept composer install with verbosity of <code>--vvv</code>so it shows detailed output.</p>

<p>Then you will have n number of packages from the commented out batch, 5 in my case.</p></li>
<li><p>Then I went to <a href="https://packagist.org"><code>https://packagist.org</code></a> and went to each of that package from the faulty batch. I checked their internal dependencies or requirements of php version etc. Cross checked with other packages in the same batch if there is a conflict of version.</p></li>
<li><p>But I still did not find the dependency conflict. So I came back to my app where composer install worked when I commented out the failty batch. Then I did <code>composer show --tree</code>. That time I found that :</p></li>
</ol>

<pre><code>`barryvdh/laravel-dompdf` required `dompdf/dompdf` at version `^0.8` 
`laravel-datatables-oracle` required `dompdf/dompdf` at version `^0.7`
</code></pre>

<p>I had to upgrade version of <code>laravel-datatables-oracle</code> so that its dependency of <code>dompdf/dompdf</code> is at version <code>^0.8</code> which matches with <code>barryvdh/laravel-dompdf</code>'s installed version.</p>

<p>Don't worry, once you do this in your own app you will figure it out that it's not that hard. I freaked out myself when I saw the error for the first time.</p>

<ul>
<li>Quick note on composer diagnosis :</li>
</ul>

<p>You can run <code>composer diagnose</code> which gives you suggestions and warnings to improve the <code>composer.json</code> package version calculations. e.g.</p>

<pre><code>require.barryvdh/laravel-debugbar : exact version constraints (2.3.2) should be avoided if the package follows semantic versioning
require.webmozart/assert : exact version constraints (1.2) should be avoided if the package follows semantic versioning
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel content-length header issue with gzip compression]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/04/23/laravel-content-length-issue-with-gzip-nginx-compression/"/>
            <updated>2019-04-23T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/04/23/laravel-content-length-issue-with-gzip-nginx-compression/</id>
            <content type="html"><![CDATA[<p>As an optimization process from server side responses, we use gzip compression which compresses the response before sending it to the client. Compressing responses as a result significantly reduces the size of data being transmitted.</p>

<p>As you can imagine any type of compression requires certain amount of memory and processing power. Considering the gzip compression happens at runtime, it consumes considerable processing resources. Which is why it is important to configure the compression for the responses which really need it.</p>

<ul>
<li>Configuring compression :</li>
</ul>

<p>An application web server has different types of responses, some might be extremely small having size of 10byte or some with very large data having size more than 1MB. It is fairly good to consider  that the 10byte response does not need compression as it's already very very tiny in size. If your server is attempting to compresses such smal responses as well, its consuming unnccessary resources in response compression.</p>

<p>To avoid this, we use <code>gzip directives</code> to notify gzip compression mechanism that only compress the responses which have size greater then the defined directive value. We use <code>gzip_min_length</code> directive for it which takes numeric value representing <code>bytes</code>.</p>

<pre><code>gzip_min_length 1000;
</code></pre>

<p>As per above gzip configuration, any response having size less than 1000 bytes will be transmitted to the client as it is without any compression. Any response having size greater than 1000 bytes will be compressed first at runtime and then transmitted to the client.</p>

<p>Note : The value of <code>1000</code> bytes is taken just as an example for this article. Please change it as per your requirements.</p>

<ul>
<li>Now here is the catch :</li>
</ul>

<p>Even if you have the <code>gzip_min_length</code> directive value set, it under the hood relies on <code>Content-Length</code> header present in response.</p>

<p><code>The gzip module during the compression determines the length only from the “Content-Length” response header field</code></p>

<p>So, if your app server is <code>NOT</code> having <code>Content-Length</code> header, <code>gzip_min_length</code> directive is not going to determine the response size and hence it will default to <code>all responses being compressed</code> before their transmittion to client.</p>

<p>This is pretty bad for a server which is serving lot of requests as nginx    gzip is utilizing unneccessary resources for compression of responses very tiny in size.</p>

<ul>
<li>The solution :</li>
</ul>

<p>The solution is fairly simple, we need to add <code>Content-Length</code> in each of our response so that gzip can determine the response size and decide if compression is to be done or not.</p>

<p>As we are focusing on laravel in this article, we can add content length using a simple middleware. Let's call it <code>ContentLegthMiddleware</code> :</p>

<pre><code class="php">&lt;?php

namespace App\Http\Middleware;

use Closure;

class ContentLegthMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle($request, Closure $next)
    {
        $response = $next($request);

        // Get response length
        $responseLength = strlen($response-&gt;getOriginalContent());

        // Add the header
        $response-&gt;header('Content-Length', $responseLength);

        // Return the response
        return $response;
    }
}
</code></pre>

<p>Last but not the least, you need to add the middleware in <code>app/Http/Kernel.php</code>.</p>

<p>Now you will be able to see <code>Content-Length: xxx</code> in your dev tools under response headers.</p>

<ul>
<li>Benchmarking :</li>
</ul>

<p>It is important to see if these changes have made any difference. I used <a href="https://github.com/JoeDog/siege"><code>Siege</code></a> load testing framework to test my server before and after the above changes were done. I could definitely see quicker response times and less CPU utilization. Please note that, this will be significantly seen on a high workload. If you have couple of requests on your server, the difference in performance will be negligible.</p>

<ul>
<li>Quick note on gzip_comp_level :</li>
</ul>

<p>The gzip compression as another directive called <code>gzip_comp_level</code> which receives values from <code>1</code> to <code>9</code>, where compression increases from 1 to 9. This is another vital directive. If you have comression level, it is going to consume more resources for compressing the response. For most servers value of 2 or 3 is enough as difference between compression from level to level is not significant.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel use secure SSL connection while using AWS RDS]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/04/10/laravel-rds-ssl-encryption-in-transit/"/>
            <updated>2019-04-10T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/04/10/laravel-rds-ssl-encryption-in-transit/</id>
            <content type="html"><![CDATA[<p>Amazon Relational Database Service Amazon RDS is a cloud based web service that makes things easier to set up, operate, and scale a relational databases on the cloud. It has become one of the popular choices when setting up laravel database infrastructure.</p>

<ul>
<li>Quick question :</li>
</ul>

<p>If you are using AWS RDS in your laravel application, is your connection encrypted in transit? Or so ask other way around, is your laravel application connecting to AWS RDS using a secure SSL connection?</p>

<p>If you think that RDS comes up with secure encryption in transit, you are right, it implements SSL. However, is it turned on somehow by default or is it there when we use it directly? Not really.. I had a perception that my laravel app is secured in transit by SSL encryption until I found out its not.</p>

<ul>
<li>Let's find out :</li>
</ul>

<p>Connect to the environment/server/container where laravel is hosted and run tinker :</p>

<pre><code class="bash">php artisan tinker
</code></pre>

<p>Once, the tinker prompt is open, run following :</p>

<pre><code class="bash">&gt;&gt;&gt; DB::select("SHOW STATUS LIKE 'Ssl_cipher'")
</code></pre>

<p>If it gives output like following :</p>

<pre><code class="bash">=&gt; [
    {
        +"Variable_name": "Ssl_cipher",
        +"Value": "DHE-RSA-AES128-SHA",
    },
]
</code></pre>

<p>Then laravel application is connecting to AWS RDS via a secure SSL connection.</p>

<p>However, if the output is like this  :</p>

<pre><code class="bash">=&gt; [
    {
        +"Variable_name": "Ssl_cipher",
        +"Value": "",
    },
]
</code></pre>

<p>Then the connection is not sure. There are number of variables which you can help us get more information about the SSL connection paramaters. We checked <code>Ssl_cipher</code> above, you can also check <code>Ssl_version</code> which might give you blank or something like <code>TLSv1</code> if SSL is working.</p>

<p>To get all information about SSL connection run following in tinker prompt :</p>

<pre><code class="bash">&gt;&gt;&gt; DB::select("SHOW STATUS LIKE '%Ssl%'")
</code></pre>

<ul>
<li>Next steps to secure the connection :</li>
</ul>

<p>If you found out that the laravel application connection is not using SSL while connecting to AWS RDS, you can follow below steps to enable the same.</p>

<p>Firstly, let us understand how it works. When you connect to AWS RDS normally via mysql cli, you do :</p>

<pre><code class="bash">mysql -h myinstance.c9akciq32.rds-us-east-1.amazonaws.com -u username -p
</code></pre>

<p>You can pass SSL certificate using <code>--ssl-ca</code> option in above command like below :</p>

<pre><code class="bash">mysql -h myinstance.c9akciq32.rds-us-east-1.amazonaws.com --ssl-ca=/path/to/certificate-authority-file.pem -u username -p
</code></pre>

<p>Optionally, you can pass <code>-ssl-mode</code> and <code>--ssl-verify-server-cert</code>. For more details about this please refer mysql's official <a href="https://dev.mysql.com/doc/refman/5.7/en/encrypted-connection-options.html">documentation</a>.</p>

<p>Now let's get back to the original problem which we are here to solve. How we are going to do this in Laravel?</p>

<p>Step 1 : Downloading the <code>certificate authority file</code>. AWS RDS has a commonly published pem file called <code>rds-combined-ca-bundle.pem</code> which you can download directly from <a href="https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem">here</a>. It is an officially published pem file which will work in all default RDS SSL connections.</p>

<p>Step 2 : Save the downloaded file from step 1 inside a new directory called <code>RDSCerts</code> inside laravel root. Quick note that in this step itself, I would add this inside gitignore because there is no need to add pem and cert files inside the version control.</p>

<p>Step 3 : Laravel's database configurations are inside <code>config/database.php</code> file. It already has a <code>mysql</code> section. Let's not change that, lets copy that entirely into a new configuration section called <code>mysql_ssl</code> where we will also add the certification authority file in options like below :</p>

<pre><code class="php">'mysql_ssl' =&gt; [
    'driver' =&gt; 'mysql',
    'host' =&gt; env('DB_HOST', '127.0.0.1'),
    'port' =&gt; env('DB_PORT', '3306'),
    'database' =&gt; env('DB_DATABASE', 'forge'),
    'username' =&gt; env('DB_USERNAME', 'forge'),
    'password' =&gt; env('DB_PASSWORD', ''),
    'unix_socket' =&gt; env('DB_SOCKET', ''),
    'charset' =&gt; 'utf8mb4',
    'collation' =&gt; 'utf8mb4_unicode_ci',
    'prefix' =&gt; '',
    'prefix_indexes' =&gt; true,
    'strict' =&gt; false,
    'engine' =&gt; null,
    'options' =&gt; [    
        PDO::MYSQL_ATTR_SSL_CA =&gt; base_path('RDSCerts/rds-combined-ca-bundle.pem')
    ],
],
</code></pre>

<p>Important note, You might be thinking that when we need to pass <code>--ssl-verify-server-cert</code> option somehow from laravel's configuration as well. Don't worry it's enabled by default. If you want to disable it then you can pass <code>PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT = false</code> which I would not suggest.</p>

<p>There are more options about SSL which you can check in the official PDO <a href="https://www.php.net/manual/en/ref.pdo-mysql.php">documentation</a>.</p>

<p>Once you follow above 3 steps, you should be good to go. Cross check by running <code>DB::select("SHOW STATUS LIKE '%Ssl%'")</code> in tinker as we did earlier in this article. You should see ciphers and ssl version mentioned in the connection.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel finally has higher level orWhere for query scopes]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/"/>
            <updated>2019-03-17T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/17/laravel-finally-has-higher-level-or-where/</id>
            <content type="html"><![CDATA[<p>Laravel's excellent querybuilder and Eloquent ORM is handy as ever. But with newer version of laravel, it's much more simpler. 5.8 is here already and this feature has not been talked as much because it seems a minor feature release. Let's dive in with an example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Foundation\Auth\User as Authenticatable;
use Role;

class User extends Authenticatable
{
    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [

        'password', 'remember_token',
    ];

    /*
     * The attributes that should be mutated to dates.
     *
     * @var array
     */
    protected $dates = ['deleted_at'];

    /**
     * Scope a query to only filter admin users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeAdmin($query)
    {
        return $query-&gt;where('role', Role::Admin);
    }

    /**
     * Scope a query to only filter reviewer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeReviewer($query)
    {
        return $query-&gt;where('role', Role::Reviewer);
    }

    /**
     * Scope a query to only filter customer users.
     *
     * @param \Illuminate\Database\Eloquent\Builder $query
     * @return \Illuminate\Database\Eloquent\Builder
     */
    public function scopeCustomer($query)
    {
        return $query-&gt;where('role', Role::Customer);
    }
}
</code></pre>

<p>The use case is, we want to get the users who are either has <code>admin</code> or <code>reviewer</code> role.</p>

<p>For earlier versions of laravel(version &lt; 5.8), we would do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere(function (Builder $query) {
    $query-&gt;reviewer();
})-&gt;get();
</code></pre>

<p>There is nothing difficult in above eloquent query but having a closure just to filter a scope for an orWhere clause seems too much sometimes. But that case is no more valid after 5.8 releases. Now we can do :</p>

<pre><code class="php">$users = App\User::admin()-&gt;orWhere-&gt;reviewer()-&gt;get();
</code></pre>

<p>And that's it. It's a very small change but makes the code much more simpler to implement and read. Sometimes you might get lost in the closures when the query is large. Features like this makes it much more comfortable to implement.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel has one through]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/"/>
            <updated>2019-03-13T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/03/13/laravel-has-one-through/</id>
            <content type="html"><![CDATA[<p>Laravel 5.8 is now released and one thing from the release notes many people might be waiting for is the <code>hasOneThrough</code> relationship. Laravel ealier had <code>hasManyThrough</code>, but with the addition of <code>hasOneThrough</code> it's more flexible. Let's dive into an example :</p>

<p>Consider we have <code>User</code> Model, <code>Reviewer</code> Model and <code>Activity</code> Model with structure :</p>

<pre><code>users
    id - integer
    reviewer_id - integer

reviewers
    id - integer

activities
    id - integer
    user_id - integer
</code></pre>

<p>Each <code>reviewer</code> has one <code>user</code>, and each <code>user</code> is associated with one user <code>activity</code> record. If we want to get <code>activity</code> from <code>reviewer</code>, there is no <code>reviewer_id</code> column in <code>activities</code> table, in such case we can use <code>hasOneThrough</code> relation. Let's define the relationship now :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough('App\Activity', 'App\User');
    }
}
</code></pre>

<p>To understand more, lets use Laravel conventional terms on the models. In this case the <code>Activity</code> is the final model we would need to relate, while <code>User</code> is the intermediate model.</p>

<p>As all other relationships in Laravel, we can also explicitely specify the foreign keys while definining <code>hasOneThrough</code> relation, Let's do that for this example :</p>

<pre><code class="php">&lt;?php

namespace App;

use Illuminate\Database\Eloquent\Model;

class Reviewer extends Model
{
    /**
     * Get the reviewer's activity.
     */
    public function activity()
    {
        return $this-&gt;hasOneThrough(
            'App\Activity',
            'App\User',
            'reviewer_id', // Foreign key on users table...
            'user_id', // Foreign key on activities table...
            'id', // Local key on reviewers table...
            'id' // Local key on users table...
        );
    }
}
</code></pre>

<p>Now you can easily do :</p>

<pre><code class="php">$reviewer = Reviewer::first();
$activity = $reviewer-&gt;activity;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Laravel liming chunk collection]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/02/12/laravel-limiting-chunk-collection/"/>
            <updated>2019-02-12T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/02/12/laravel-limiting-chunk-collection/</id>
            <content type="html"><![CDATA[<ul>
<li>Little Intro about <code>chunk</code> :</li>
</ul>

<p>Laravel comes up with an excellent Eloquent ORM. There are lot of cool things in Eloquent, one of which is <code>chunk</code> method.</p>

<p>Usually when you need to process large data, lets say you want to update <code>users</code> table and assign a coupon code based on 3rd party APIs.</p>

<p>What you can do is :</p>

<pre><code class="php">User::get()-&gt;each(function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>Doing this is good but if you have thousands of users, loading them all up at once to do the coupon saving process. That's going to take consume a hige memory at a time and maybe the server will be exusted because so much data is stored in memory for processing at a time.</p>

<p>The <code>chunk</code> method helps these kind of implementations. Chunking records means taking a batch of records by a limit, process those, take the next batch processing those and so on... The idea is you are taking a subset of data to process at a time instead of entire data loaded into memory.</p>

<p>The chunk method will retrieve a "chunk" of Eloquent models, feeding them to a given Closure for processing. Using the chunk method will conserve memory when working with large result sets.</p>

<p>Lets do the same but with chunk this time :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::chunk($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>Now, as you can probably guess this will take 50 user records at a time to process, once  those are completed it will take next 50 untill all records are procesed by chunk closure.</p>

<ul>
<li>The main problem <code>Limit</code> with <code>Chunk</code> :</li>
</ul>

<p>Let's apply limit to the above example :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::limit(100)-&gt;chunk($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>If you would think laravel will chunk 50 records in 2 batches are we are limiting the total records to 100, oops not really.</p>

<p>Laravel will do series of queries like below to chunk the records :</p>

<pre><code class="sql">select * from `users` limit 50 offset 0
select * from `users` limit 50 offset 50
select * from `users` limit 50 offset 100
...
</code></pre>

<p>The chunk method <code>ignores</code> any previous eloquent method which applies limit. It can be <code>limit</code> and <code>offset</code> OR <code>take</code> and <code>skip</code>...</p>

<p>This becomes a problem for which lot of people had raised an issue on laravel's github repo. But Laravel's core dev team mentioned this is the expected behaviour and rightfully so.. Chunk itself is using limit to convert entire collection in batches.</p>

<ul>
<li>And.... Here it is.. The Solution you were waiting for :</li>
</ul>

<p>Laravel has a chunk variation called <code>chunkById</code>. Let's use the first example and implement <code>chunkById</code> now :</p>

<pre><code class="php">$recodsPerBatch = 50;

User::chunkById($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>The main and only fundamental difference between <code>chunk</code> and <code>chunkById</code> is how it structures the query.</p>

<pre><code class="sql">select * from `users` where `id` &gt; 0 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 and `id` &gt; 100 order by `id` asc limit 50
select * from `users` where `id` &gt; 0 and `id` &gt; 50 and `id` &gt; 100 and `id` &gt; 150 order by `id` asc limit 50
...
</code></pre>

<p>If you observer in the queries done by <code>chunkById</code> :</p>

<ol>
<li>It's adding an order by clause to the id column (By the way you can specify the column as 3rd argument to chunkById method if itis not id)</li>
<li>It adds <code>where id &gt; x</code> each time it processes the next batch</li>
<li>There is no <code>offset</code> used and <code>id</code> column is used conceptually as an offset.</li>
</ol>

<p>This gives you an advantage that you can add your offset in the query using <code>id</code> column as a limit just like <code>chunkById</code> is doing internallu.</p>

<p>Let's limit the chunk in our example with 100 records to chunk :</p>

<pre><code class="php">$recodsPerBatch = 50;

$limit = 100;

$maxId = User::orderBy('id', 'asc')-&gt;offset($limit)-&gt;limit(1)-&gt;select('id')-&gt;first()-&gt;id;

User::where('id', '&lt;', $maxId)-&gt;chunkById($recodsPerBatch, function($user){

    $coupon = API::getCouponCode($user-&gt;email);
    $user-&gt;coupon = $coupon;
    $user-&gt;save();
});
</code></pre>

<p>What we did was, even if we can not use limit directly, we got an id which falls just above the limit we want. Used that to add a where clause of <code>where('id', '&lt;', $maxId)</code>.</p>

<p>This will then chunk the 100 results, with 2 batches of 50 records in each batch. Cool, isn't it!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[PHP argument validation using assert]]></title>
            <link href="https://techsemicolon.github.io/blog/2019/01/12/php-argument-validation-using-assert/"/>
            <updated>2019-01-12T00:00:00+00:00</updated>
            <id>https://techsemicolon.github.io/blog/2019/01/12/php-argument-validation-using-assert/</id>
            <content type="html"><![CDATA[<p>When creating classes, we either pass arguments to the constructor function or have setter-getter functions to access class properties. These arguments may sometime have a specific format or requirements. For Example :</p>

<pre><code class="php">/**
 * $age integer
 *
 * @return  string
 */
function($age){
    return "You are $age years old";
}
</code></pre>

<p>Above function expects $age to be an integer. If any other type is passed, function will no work as expected.</p>

<p>The example was very granular. When your core classes have functions which affect important domain logics of your project, argument validation becomes an  important part.</p>

<p>PHP comes with default function(or more specifically a language construct for PHP version 7) called <a href="http://php.net/manual/en/function.assert.php"><code>assert</code></a>, which basically checks if provided assertion if false. If yes then you can handle the exceptions in callback. Even if this is useful, I will strongly suggest using composer plugin <a href="https://github.com/webmozart/assert">webmozart/assert</a> for this. It has very useful intuitive methods for the same.</p>

<ul>
<li>Example :</li>
</ul>

<p>Let's consider a function <code>placeOrder()</code> which takes array of <code>$items</code> having instances of <code>Item</code> class, a <code>$shippingPrice</code> and <code>$customer</code> having instance of <code>Customer</code> class.</p>

<pre><code class="php">&lt;?php 

use Webmozart\Assert\Assert;

Class Order{

    /**
     * Array of Item instances
     * @var array
     */
    private $items;

    /**
     * Shipping Price
     * @var float
     */
    private $shippingPrice;

    /**
     * Customer Instance
     * @var Customer
     */
    private $customer;

    /**
     * Instantiate Order class
     * 
     * @param $items
     * @param $shippingPrice
     * @param $customer
     */
    function __construct($items, $shippingPrice, $customer)
    {
        Assert::isArray($items, '$items must be an array. Got: %s');
        Assert::allIsInstanceOf($items, '\Item', '$items must contain array of Item class instances. Got: %s');
        Assert::numeric($shippingPrice, '$shippingPrice must be numeric. Got: %s');
        Assert::isInstanceOf($customer, '\Customer', '$customer must be an instance of Customer class. Got: %s');

        $this-&gt;shippingPrice    = $shippingPrice;
        $this-&gt;customer         = $customer;
        $this-&gt;items            = $items;
    }

    /**
     * Places order
     * 
     * @return Order
     */
    public function placeOrder(){

        // PlaceOrder
    }
}
</code></pre>

<p>Now, when we instantiate the order class :</p>

<pre><code class="php">$customer = new Customer('John Doe');

$order = new Order([], 12.22, $customer);
</code></pre>

<p>We are passing an invalid value for <code>$items</code> argument. It will throw <code>\InvalidArgumentException</code> with error message : <code>$items must contain array of Item class instances. Got: Array</code>.</p>

<p>If you are using setter-getter functions instead of constructor parameters, you can have these assertions inside the setter functions. Above methodology is sometimes referred as defensive programming where we are making sure function will not break at the intial stages itself. The counter concept of defensive programming will be validating these arguments as and when they are actually used inside <code>placeOrder</code> function.</p>

<p>Advantages :</p>

<ol>
<li>Prevents errors caused due to unexpected type of arguments passed</li>
<li>Easier to debug</li>
<li>Easier to create unit tests and catch asset exceptions</li>
<li>Easier to write readable custom error messages</li>
</ol>

<p>Disadvantages :</p>

<p>If not properly thought, duplicate validations can cause redundancies. For example in above case, if instance of <code>Item</code> class contains a valid price is a concern of <code>Item</code> class. If that validation is also present in <code>Order</code> class as well, it created redundancies.</p>

<p>You can find more assertion options available here : <a href="https://github.com/webmozart/assert">https://github.com/webmozart/assert</a></p>
]]></content>
        </entry>
    </feed>