<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[Tech.Semicolon]]></title>
    <link href="/atom.xml" rel="self"/>
    <link href="/"/>
    <updated>2019-01-06T08:03:50+00:00</updated>
    <id>/</id>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Laravel Module Pattern]]></title>
            <link href="/blog/2020/01/07/laravel-module-pattern/"/>
            <updated>2020-01-07T00:00:00+00:00</updated>
            <id>/blog/2020/01/07/laravel-module-pattern/</id>
            <content type="html"><![CDATA[<p><img src="https://www.valuecoders.com/blog/wp-content/uploads/2018/05/laravel.jpg" alt="Image of Laravel" /></p>

<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.</p>

<p><em>Markdown is cool.</em></p>

<p><strong>So is twig, because it knows this page's name is: Laravel Module Pattern</strong></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Syntax Highlighting]]></title>
            <link href="/blog/2013/02/04/highlight/"/>
            <updated>2013-02-04T00:00:00+00:00</updated>
            <id>/blog/2013/02/04/highlight/</id>
            <content type="html"><![CDATA[<p>You're all programmers, right? And you're writing code snippets on your Sculpin
powered blog? Yeah. So you want some highlighting with your static site generation?
Here you go!</p>

<pre><code>namespace Foo;

/**
 * Awesome Contrived Example.
 */
class Bar implements BarInterface
{
    private $baz;

    public function __construct(BazInterface $baz)
    {
        $this-&gt;baz = $baz;
    }

    public function doIt()
    {
        return $this-&gt;baz-&gt;do('it');
    }
}
</code></pre>

<p>You can also use <a href="http://michelf.ca/projects/php-markdown/extra/#fenced-code-blocks">fenced code blocks</a> with a syntax declaration at the top.
You can use either <code>~</code> or <code>`</code> to mark them.</p>

<pre><code class="php">if ($fencedCodeBlock-&gt;syntax !== 'PHP') {
    throw new UnexpectedValueException("wat");
}
</code></pre>

<p>Like this addition to the skeleton? You can thank for <a href="https://github.com/Pawka">@Pawka</a>
for suggesting it. :)</p>
]]></content>
        </entry>
    </feed>